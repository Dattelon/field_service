# 📊 Схема работы Watchdog для истёкших офферов

## Архитектура системы

```
┌─────────────────────────────────────────────────────────────────┐
│                         Admin Bot                                │
│                                                                   │
│  ┌──────────────┐  ┌──────────────┐  ┌─────────────────────┐   │
│  │  Heartbeat   │  │  Scheduler   │  │ Commission Watchdog │   │
│  │   (5 min)    │  │   (15 sec)   │  │      (10 min)       │   │
│  └──────────────┘  └──────────────┘  └─────────────────────┘   │
│                                                                   │
│  ┌──────────────┐  ┌──────────────────────────────────────┐    │
│  │  Autoclose   │  │ 🆕 Expired Offers Watchdog (60 sec) │    │
│  │   (1 hour)   │  │                                       │    │
│  └──────────────┘  └──────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────────┘
                               │
                               │ UPDATE offers
                               ▼
                    ┌────────────────────┐
                    │    PostgreSQL      │
                    │                    │
                    │  ┌──────────────┐  │
                    │  │   offers     │  │
                    │  │              │  │
                    │  │ SENT ──► EXP │  │
                    │  └──────────────┘  │
                    └────────────────────┘
```

## Жизненный цикл оффера

### До исправления (проблема):
```
SENT (expires_at = 08:38) ──► [зависание 13+ мин] ──► scheduler tick ──► EXPIRED
                                        ↓
                            мастер недоступен
                            для ручного назначения
```

### После исправления:
```
SENT (expires_at = 08:38) ──► [≤60 сек] ──► watchdog tick ──► EXPIRED
                                                                    ↓
                                                        мастер доступен
                                                        для назначения
```

## Блок-схема watchdog

```
┌──────────────────────────────────────────┐
│         Старт watchdog_expired_offers     │
│         interval_seconds = 60             │
└──────────────────┬───────────────────────┘
                   │
                   ▼
       ┌─────────────────────┐
       │  Ожидание 60 секунд │
       └──────────┬──────────┘
                  │
                  ▼
        ┌──────────────────────┐
        │  Открыть сессию БД   │
        └──────────┬───────────┘
                   │
                   ▼
        ┌──────────────────────────────────┐
        │ SQL: UPDATE offers               │
        │ SET state = 'EXPIRED'            │
        │ WHERE state = 'SENT'             │
        │   AND expires_at <= NOW()        │
        │ RETURNING id, order_id, master_id│
        └──────────┬───────────────────────┘
                   │
                   ▼
            ┌─────────────┐
            │ Есть офферы? ├──── НЕТ ───┐
            └──────┬──────┘              │
                   │ ДА                  │
                   ▼                     │
        ┌────────────────────┐           │
        │ Для каждого оффера:│           │
        │ - Логирование      │           │
        │ - live_log.push    │           │
        │ - logger.info      │           │
        └──────────┬─────────┘           │
                   │                     │
                   ▼                     │
           ┌──────────────┐              │
           │ Commit в БД  │              │
           └──────┬───────┘              │
                  │                      │
                  └──────────────────────┘
                             │
                             ▼
                  ┌──────────────────┐
                  │ Проверка ошибок  ├──── ОШИБКА ───► Логирование
                  └────────┬─────────┘
                           │ OK
                           ▼
                  ┌──────────────────┐
                  │ Повтор цикла     │
                  └──────────────────┘
```

## SQL запрос watchdog

```sql
-- Выполняется каждые 60 секунд
UPDATE offers
SET state = 'EXPIRED',
    responded_at = NOW()
WHERE state = 'SENT'
  AND expires_at <= NOW()
RETURNING id, order_id, master_id;
```

**Особенности:**
- Атомарная операция (UPDATE + RETURNING)
- Работает со всеми истёкшими офферами сразу
- Не блокирует другие операции (уровень изоляции Read Committed)
- Устанавливает `responded_at` для аудита

## Временная шкала обработки

```
T=0:00    Оффер отправлен (SENT)
          expires_at = T+2:00
          │
          ▼
T+2:00    Оффер истёк (SLA timeout)
          │ ◄─── Мастер должен исчезнуть из кандидатов
          │
          ▼
T+2:30    ✅ Watchdog tick (цикл 60 сек)
          │
          ├─► UPDATE offers SET state='EXPIRED'
          │
          └─► Логирование: "offer_expired id=X order=Y master=Z"
          
T+2:31    ✅ Мастер снова доступен для назначения
```

## Взаимодействие с другими компонентами

```
┌──────────────┐
│ Scheduler    │──► Создаёт офферы (SENT)
└──────┬───────┘    expires_at = NOW() + SLA
       │
       ▼
┌────────────────────────────────────────────┐
│             PostgreSQL                      │
│  ┌────────────────────────────────────┐    │
│  │ offers                             │    │
│  │ ┌─────┬────────┬──────────────┐   │    │
│  │ │ id  │ state  │ expires_at   │   │    │
│  │ ├─────┼────────┼──────────────┤   │    │
│  │ │ 123 │ SENT   │ 08:38:00 UTC │   │    │
│  │ └─────┴────────┴──────────────┘   │    │
│  └────────────────────────────────────┘    │
└───────┬───────────────────────────────┬────┘
        │                               │
        │ SELECT (candidates)           │ UPDATE (expired)
        ▼                               ▼
┌───────────────────┐         ┌─────────────────┐
│ select_candidates │         │ Expired Offers  │
│   (masters.py)    │         │    Watchdog     │
│                   │         │                 │
│ Проверяет:        │         │ Помечает:       │
│ ✓ Город           │         │ SENT → EXPIRED  │
│ ✓ Район           │         │                 │
│ ✓ Навык           │         │ Если:           │
│ ✗ Активный оффер  │◄────────│ expires_at < NOW│
│   (SENT,VIEWED)   │         │                 │
└───────────────────┘         └─────────────────┘
```

## Мониторинг и алерты

### Логирование (успех):
```
INFO [watchdogs] expired_offers count=3
INFO [watchdogs] offer_expired oid=123 order=45 master=67
INFO [watchdogs] offer_expired oid=124 order=46 master=68
INFO [watchdogs] offer_expired oid=125 order=47 master=69
```

### Логирование (ошибка):
```
ERROR [watchdogs] watchdog_expired_offers error: <Exception>
```

### Метрики (будущее):
```python
# Prometheus metrics (TODO)
expired_offers_total = Counter('expired_offers_total')
expired_offers_processing_time = Histogram('expired_offers_processing_seconds')
expired_offers_lag = Histogram('expired_offers_lag_seconds')
```

## Сравнение: До vs После

### До исправления:
```
┌──────────────────────────────────────────────────────┐
│ Distribution Scheduler (каждые 15 сек)               │
│                                                       │
│ IF (заказ в очереди) THEN                            │
│   ├─► expire_overdue_offer(order_id)                 │
│   └─► Обрабатывает только заказы в SEARCHING         │
│                                                       │
│ ELSE                                                  │
│   └─► Оффер НЕ обрабатывается (зависает!)           │
└──────────────────────────────────────────────────────┘

Проблемы:
❌ Офферы вне очереди не обрабатываются
❌ Задержка до следующего tick scheduler (до 15 сек)
❌ Конкуренция при FOR UPDATE SKIP LOCKED
❌ Зависание до 15+ минут
```

### После исправления:
```
┌──────────────────────────────────────────────────────┐
│ Expired Offers Watchdog (каждые 60 сек)             │
│                                                       │
│ Обрабатывает ВСЕ истёкшие офферы:                   │
│   ├─► В очереди                                      │
│   ├─► Вне очереди                                    │
│   ├─► Любого статуса заказа                          │
│   └─► Независимо от scheduler                        │
│                                                       │
│ UPDATE offers SET state='EXPIRED'                    │
│ WHERE state='SENT' AND expires_at <= NOW()           │
└──────────────────────────────────────────────────────┘

Преимущества:
✅ Полная независимость от scheduler
✅ Обработка всех офферов без исключений
✅ Гарантированная обработка ≤60 сек
✅ Простой SQL без конкуренции
✅ Логирование и мониторинг
```

## Failover и отказоустойчивость

### Сценарий 1: Watchdog упал
```
T=0:00    Watchdog запущен
T=1:00    Watchdog обработал офферы
T=1:30    ❌ Watchdog упал (exception)
          │
          ├─► Логирование ошибки
          │
          └─► Scheduler продолжает работать (fallback)
          
T=2:00    ✅ Watchdog перезапущен (asyncio retry)
          │
          └─► Обработка всех накопленных офферов
```

### Сценарий 2: БД недоступна
```
T=0:00    Watchdog пытается UPDATE
          │
          ├─► ConnectionError
          │
          ├─► Логирование в live_log
          │
          └─► Ожидание следующего цикла (60 сек)
          
T=1:00    ✅ БД восстановлена
          │
          └─► Обработка офферов продолжена
```

### Сценарий 3: Админ-бот перезапущен
```
T=0:00    Админ-бот остановлен
          │
          └─► Graceful shutdown всех watchdog
          
T=0:30    Боты не работают
          │
          └─► Офферы накапливаются в БД
          
T=1:00    ✅ Админ-бот запущен
          │
          ├─► Watchdog стартует
          │
          └─► Первый цикл обрабатывает все накопленные офферы
```

---

**Версия:** v1.2.2  
**Последнее обновление:** 2025-10-10
