"""–ü–∞—Ç—á –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ orders.py"""
import re

FILE_PATH = r"C:\ProjectF\field-service\field_service\bots\master_bot\handlers\orders.py"

def main():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(FILE_PATH, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ master_id –ø–µ—Ä–µ–¥ commit...")
    # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ master_id –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫
    content = content.replace(
        '    # ‚úÖ STEP 4.1: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–î–û commit, –Ω–æ –æ—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)\n    _log.info("offer_accept: starting distribution_metrics recording for order=%s", order_id)\n    try:',
        '    # ‚úÖ STEP 4.1: –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–î–û commit, –Ω–æ –æ—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è)\n    _log.info("offer_accept: starting distribution_metrics recording for order=%s", order_id)\n    \n    # üîß BUGFIX: –°–æ—Ö—Ä–∞–Ω—è–µ–º master_id –î–û –∫–æ–º–º–∏—Ç–∞ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MissingGreenlet –ø–æ—Å–ª–µ commit)\n    master_id_for_metrics = master.id\n    \n    try:'
    )
    
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Enum –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è category...")
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É category (Enum ‚Üí string)
    content = content.replace(
        '                    category=order_row.category,  # BUGFIX: Pass enum directly, not string',
        '                    category=order_row.category.value if hasattr(order_row.category, \'value\') else str(order_row.category),'
    )
    
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Enum –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è order_type...")
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É order_type (Enum ‚Üí string)
    content = content.replace(
        '                    order_type=order_row.type,  # BUGFIX: Pass enum directly, not string',
        '                    order_type=order_row.type.value if hasattr(order_row.type, \'value\') else str(order_row.type),'
    )
    
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ master_id_for_metrics...")
    # 4. –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ master.id –Ω–∞ master_id_for_metrics –≤ –±–ª–æ–∫–µ –º–µ—Ç—Ä–∏–∫
    content = re.sub(
        r'(insert\(m\.distribution_metrics\)\.values\(\s+order_id=order_id,\s+)master_id=master\.id,',
        r'\1master_id=master_id_for_metrics,',
        content
    )
    
    content = re.sub(
        r'preferred_master_used=\(master\.id == order_row\.preferred_master_id\)',
        r'preferred_master_used=(master_id_for_metrics == order_row.preferred_master_id)',
        content
    )
    
    content = re.sub(
        r'"distribution_metrics recorded: order=%s master=%s round=%s candidates=%s time=%ss",\s+order_id, master\.id,',
        r'"distribution_metrics recorded: order=%s master=%s round=%s candidates=%s time=%ss",\n                order_id, master_id_for_metrics,',
        content
    )
    
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ session.refresh(master) –ø–æ—Å–ª–µ commit...")
    # 5. –ó–∞–º–µ–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º refresh
    content = content.replace(
        '''    # ‚úÖ BUGFIX: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à SQLAlchemy –ø–æ—Å–ª–µ commit
    # –ë–µ–∑ —ç—Ç–æ–≥–æ _render_offers –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
    # BUGFIX: SQLAlchemy automatically refreshes data after commit
    # No need for expire_all() - it breaks async context''',
        '''    # üîß BUGFIX: –ü–æ—Å–ª–µ commit –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç master –∏–∑ –ë–î (–≤–º–µ—Å—Ç–æ expire_all)
    # session.expire_all() –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ MissingGreenlet –æ—à–∏–±–∫–µ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ master.id
    _log.info("offer_accept: refreshing master after commit, master_id=%s", master_id_for_metrics)
    await session.refresh(master)
    _log.info("offer_accept: master refreshed successfully")'''
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(FILE_PATH, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {FILE_PATH}")
    print("\n–í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:")
    print("  1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ master_id –ø–µ—Ä–µ–¥ commit")
    print("  2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è category Enum ‚Üí string")
    print("  3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è order_type Enum ‚Üí string")
    print("  4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ master_id_for_metrics –≤–º–µ—Å—Ç–æ master.id")
    print("  5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ await session.refresh(master) –ø–æ—Å–ª–µ commit")

if __name__ == "__main__":
    main()
