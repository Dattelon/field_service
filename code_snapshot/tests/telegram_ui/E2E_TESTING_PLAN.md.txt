# План E2E тестирования через Telethon

## Дата: 2025-10-09

## Цель
Полное покрытие жизненного цикла заказа от создания до закрытия во всех возможных сценариях.

---

## Приоритет P0: Базовый Happy Path

### TP-001: Полный цикл заказа (успешное выполнение)
**Цель:** Проверить основной сценарий от создания до закрытия

**Шаги:**
1. **Подготовка:**
   - Создать 2 мастеров (онбординг через мастер-бот)
   - Мастер 1: Москва, ЦАО, статус "Работаю"
   - Мастер 2: Москва, ЦАО, статус "Работаю"

2. **Создание заказа (Админ-бот):**
   - Логин как глобальный админ
   - Создать новый заказ
   - Услуга: "Ремонт iPhone"
   - Город: Москва, Район: ЦАО
   - Слот: ближайший доступный
   - Клиент: +79991234567
   - Адрес: "ул. Тверская, 1"
   - Стоимость: 3000 руб

3. **Ожидание автораспределения:**
   - Дождаться push-уведомления мастерам (в течение 30 сек)
   - Проверить что оба мастера получили оффер

4. **Принятие оффера (Мастер-бот 1):**
   - Нажать "Принять заказ"
   - Проверить что статус изменился на ASSIGNED
   - Проверить что Мастер 2 больше не видит оффер

5. **Начало работы (Мастер-бот 1):**
   - Нажать "Приехал на объект"
   - Админ подтверждает старт
   - Статус → STARTED

6. **Закрытие заказа (Мастер-бот 1):**
   - Нажать "Завершить заказ"
   - Статус → MASTER_COMPLETED

7. **Финализация (Админ-бот):**
   - Подтвердить выполнение
   - Статус → CLOSED
   - Проверить создание комиссии (50%)

8. **Проверка:**
   - История заказа: NEW → IN_QUEUE → ASSIGNED → STARTED → MASTER_COMPLETED → CLOSED
   - Комиссия создана, статус PENDING
   - Мастер видит заказ в истории

**Ожидаемый результат:** ✅ Заказ закрыт, комиссия начислена

---

### TP-002: Заказ с отклонениями мастеров (эскалация)
**Цель:** Проверить работу эскалаций при отклонении офферов

**Шаги:**
1. Создать 3 мастеров (Москва, ЦАО, статус "Работаю")
2. Создать заказ (админ-бот)
3. **Раунд 1:**
   - Мастер 1 отклоняет оффер
   - Мастер 2 отклоняет оффер
   - Ждём 30 сек (timeout первого тика)
4. **Раунд 2:**
   - Проверить что Мастер 3 получил оффер
   - Мастер 3 принимает
5. Продолжить как в TP-001 (начало, завершение)

**Ожидаемый результат:** ✅ Заказ распределён на втором раунде

---

### TP-003: Заказ без мастеров (алерт в чат)
**Цель:** Проверить уведомление админов при отсутствии мастеров

**Шаги:**
1. Создать заказ (Москва, ЦАО)
2. **НЕ создавать мастеров** или все мастера в статусе "Оффлайн"
3. Ждать 120 сек (SLA timeout)
4. Проверить что в alerts_chat пришло уведомление

**Ожидаемый результат:** ✅ Алерт отправлен, заказ в IN_QUEUE

---

## Приоритет P1: Сценарии отмены

### TP-004: Отмена заказа до распределения
**Цель:** Проверить отмену на этапе NEW

**Шаги:**
1. Создать заказ (админ-бот)
2. Сразу после создания отменить (кнопка "Отменить заказ")
3. Указать причину: "Клиент передумал"

**Ожидаемый результат:** 
- ✅ Статус → CANCELLED
- ✅ Офферы не созданы
- ✅ Уведомления не отправлены

---

### TP-005: Отмена заказа во время распределения
**Цель:** Проверить отмену когда офферы уже отправлены

**Шаги:**
1. Создать мастера (Москва, ЦАО, "Работаю")
2. Создать заказ
3. Дождаться оффера у мастера (но НЕ принимать)
4. Админ отменяет заказ
5. Проверить что мастер получил уведомление об отмене

**Ожидаемый результат:**
- ✅ Статус → CANCELLED
- ✅ Офферы отменены
- ✅ Мастер видит уведомление "Заказ отменён"

---

### TP-006: Отмена после принятия мастером (до старта)
**Цель:** Проверить отмену на этапе ASSIGNED

**Шаги:**
1. Создать заказ, мастер принимает
2. Статус ASSIGNED
3. Админ отменяет заказ (причина: "Клиент отказался")
4. Проверить уведомление мастеру

**Ожидаемый результат:**
- ✅ Статус → CANCELLED
- ✅ Комиссия НЕ создана
- ✅ Мастер получил уведомление

---

### TP-007: Отмена после начала работы
**Цель:** Проверить что нельзя отменить после STARTED

**Шаги:**
1. Создать заказ, мастер принимает и начинает работу
2. Статус STARTED
3. Админ пытается отменить

**Ожидаемый результат:**
- ✅ Кнопка "Отменить" недоступна или показывает ошибку
- ✅ Статус остаётся STARTED

---

## Приоритет P1: Гарантийные заявки

### TP-008: Создание гарантийного заказа
**Цель:** Проверить создание повторного заказа по гарантии

**Шаги:**
1. Выполнить полный цикл заказа (TP-001)
2. Заказ закрыт (CLOSED)
3. Админ создаёт новый заказ:
   - Отметить "Гарантийный"
   - Связать с предыдущим заказом (order_id)
   - Указать те же адрес и услугу
4. Проверить автораспределение:
   - **Первый оффер** должен получить тот же мастер
   - Если отклонит - офферы другим

**Ожидаемый результат:**
- ✅ Приоритет отдан прежнему мастеру
- ✅ payment_source = 'company_payment'
- ✅ При закрытии комиссия 50% (как обычно)

---

## Приоритет P1: Работа с мастерами

### TP-009: Онбординг мастера (полный цикл)
**Цель:** Проверить регистрацию нового мастера

**Шаги:**
1. Мастер-бот: /start
2. Выбрать город: Москва
3. Выбрать округ: ЦАО
4. Выбрать районы: Арбат, Басманный
5. Ввести телефон: +79991234567
6. Модерация (админ-бот):
   - Найти заявку
   - Одобрить
7. Проверить что мастер видит главное меню

**Ожидаемый результат:**
- ✅ Мастер зарегистрирован
- ✅ is_approved = true
- ✅ Начальный статус "Оффлайн"
- ✅ Видит кнопку "Начать работу"

---

### TP-010: Смена статуса мастера
**Цель:** Проверить переключение статусов

**Шаги:**
1. Мастер (статус "Оффлайн")
2. Нажать "Начать работу"
3. Проверить статус → "Работаю"
4. Нажать "На перерыв"
5. Проверить статус → "Перерыв"
6. Нажать "Закончить работу"
7. Проверить статус → "Оффлайн"

**Ожидаемый результат:**
- ✅ Статусы меняются корректно
- ✅ В "Перерыв" и "Оффлайн" - офферы не приходят

---

### TP-011: Отклонение оффера мастером
**Цель:** Проверить отклонение через FSM

**Шаги:**
1. Создать заказ, мастер получает оффер
2. Нажать "Отклонить"
3. FSM: Подтвердить отклонение (коллбек offer_decline_confirm)

**Ожидаемый результат:**
- ✅ Оффер удалён (status = 'DECLINED')
- ✅ Мастер больше не видит оффер
- ✅ Автораспределение продолжается

---

## Приоритет P2: Финансы и комиссии

### TP-012: Автоблок мастера за просроченные комиссии
**Цель:** Проверить блокировку при превышении дедлайна 3 часа

**Подготовка:** Изменить время created_at комиссии в БД на -4 часа

**Шаги:**
1. Создать заказ, мастер выполняет
2. Комиссия создана (PENDING)
3. Вручную изменить created_at на -4 часа
4. Запустить watchdog (или ждать автозапуска)
5. Проверить статус мастера

**Ожидаемый результат:**
- ✅ Мастер заблокирован (is_active = false)
- ✅ Уведомление мастеру
- ✅ Офферы больше не приходят

---

### TP-013: Просмотр финансов мастером
**Цель:** Проверить отображение комиссий

**Шаги:**
1. Мастер выполнил 2 заказа:
   - Заказ 1: 3000 руб → комиссия 1500 руб (PENDING)
   - Заказ 2: 5000 руб → комиссия 2500 руб (PAID)
2. Мастер-бот: открыть "Финансы"

**Ожидаемый результат:**
- ✅ Ожидается: 1500 руб
- ✅ Выплачено: 2500 руб
- ✅ История заказов с суммами

---

### TP-014: Смена комиссии с 50% на 40%
**Цель:** Проверить понижение процента после N заказов

**Подготовка:** Настроить в settings commission_threshold = 5

**Шаги:**
1. Мастер выполняет 5 заказов (по 2000 руб)
2. Проверить комиссии 1-5: 50% (1000 руб каждый)
3. Мастер выполняет 6-й заказ (2000 руб)
4. Проверить комиссию 6: 40% (800 руб)

**Ожидаемый результат:**
- ✅ После 5 заказов комиссия = 40%
- ✅ rate = 0.4 в commissions

---

## Приоритет P2: Админ-функционал

### TP-015: Ручное назначение заказа
**Цель:** Проверить назначение мастера минуя автораспределение

**Шаги:**
1. Создать заказ (статус NEW)
2. Админ: открыть карточку заказа
3. Нажать "Назначить мастера"
4. Выбрать мастера из списка
5. Подтвердить

**Ожидаемый результат:**
- ✅ Статус → ASSIGNED
- ✅ Мастер получил уведомление
- ✅ Автораспределение остановлено

---

### TP-016: Просмотр очереди заказов
**Цель:** Проверить фильтры и сортировку

**Подготовка:**
- Создать 5 заказов в разных статусах:
  - 2x NEW (Москва)
  - 1x ASSIGNED (СПб)
  - 1x STARTED (Москва)
  - 1x CLOSED (Москва)

**Шаги:**
1. Админ-бот: открыть "Очередь заказов"
2. Фильтр: Москва, Все статусы
3. Проверить количество: 4 заказа
4. Фильтр: СПб, Все статусы
5. Проверить количество: 1 заказ
6. Фильтр: Москва, только NEW
7. Проверить количество: 2 заказа

**Ожидаемый результат:**
- ✅ Фильтры работают корректно
- ✅ Пагинация (если >10 заказов)

---

### TP-017: Модерация мастера (отклонение)
**Цель:** Проверить отклонение заявки

**Шаги:**
1. Мастер проходит онбординг
2. Админ открывает "Модерация"
3. Видит заявку мастера
4. Нажимает "Отклонить"
5. Указывает причину

**Ожидаемый результат:**
- ✅ is_approved = false
- ✅ Мастер получил уведомление с причиной
- ✅ Доступ к боту заблокирован

---

## Приоритет P3: Дополнительные сценарии

### TP-018: Рефералка (приглашение нового мастера)
**Цель:** Проверить начисление бонуса за реферала

**Шаги:**
1. Мастер 1 генерирует реферальную ссылку
2. Мастер 2 регистрируется по ссылке
3. Мастер 2 проходит модерацию
4. Мастер 2 выполняет первый заказ
5. Проверить начисление бонуса Мастеру 1 (10% от комиссии)

**Ожидаемый результат:**
- ✅ Связь referrals: referrer_id = Master1, referee_id = Master2
- ✅ Бонус 10% начислен после первого заказа
- ✅ Мастер 1 видит в финансах

---

### TP-019: Экспорт заказов (CSV/XLSX)
**Цель:** Проверить экспорт данных админом

**Шаги:**
1. Админ-бот: "Экспорты"
2. Выбрать "Заказы"
3. Период: за последние 7 дней
4. Формат: XLSX
5. Скачать файл

**Ожидаемый результат:**
- ✅ Файл сформирован
- ✅ Содержит все заказы за период
- ✅ Колонки: ID, дата, мастер, статус, сумма

---

### TP-020: Множественные офферы (race condition)
**Цель:** Проверить что 2 мастера не могут принять один заказ

**Шаги:**
1. Создать заказ
2. Два мастера получают оффер одновременно
3. Оба нажимают "Принять" в течение 1 сек
4. Проверить что только один принял

**Ожидаемый результат:**
- ✅ Только 1 мастер получил заказ (ASSIGNED)
- ✅ Второй видит "Заказ уже занят"
- ✅ В БД 1 оффер ACCEPTED, остальные EXPIRED

---

## Структура тестов

```
tests/telegram_ui/
├── conftest.py              # Фикстуры (cleanup, мастера, админ)
├── test_lifecycle.py        # TP-001 до TP-008
├── test_master_actions.py   # TP-009 до TP-011
├── test_finances.py         # TP-012 до TP-014
├── test_admin_functions.py  # TP-015 до TP-017
├── test_edge_cases.py       # TP-018 до TP-020
└── helpers/
    ├── master_helpers.py    # create_master, change_status
    ├── order_helpers.py     # create_order, wait_for_offer
    └── admin_helpers.py     # assign_order, moderate_master
```

---

## Метрики покрытия

| Категория                | Количество тестов | Приоритет |
|--------------------------|-------------------|-----------|
| Базовый Happy Path       | 3                 | P0        |
| Сценарии отмены          | 4                 | P1        |
| Гарантийные заявки       | 1                 | P1        |
| Работа с мастерами       | 3                 | P1        |
| Финансы и комиссии       | 3                 | P2        |
| Админ-функционал         | 3                 | P2        |
| Дополнительные сценарии  | 3                 | P3        |
| **ИТОГО**                | **20**            |           |

---

## Окружение для тестов

1. **Docker:** PostgreSQL, Redis (если используется)
2. **Боты:** Запущены локально или на тестовом сервере
3. **Telethon:** Авторизованная сессия
4. **БД:** Чистая (см. 2025-10-09_clean_test_data.sql)
5. **Конфиг:** .env с тестовыми данными

---

## Автоматизация

### Запуск всех P0 тестов:
```powershell
pytest tests/telegram_ui/test_lifecycle.py -v -m p0
```

### Запуск полного набора:
```powershell
pytest tests/telegram_ui/ -v
```

### CI/CD интеграция:
```yaml
# .github/workflows/e2e-tests.yml
- name: Run E2E Tests
  run: |
    docker-compose up -d
    pytest tests/telegram_ui/ -v --html=report.html
```

---

## Следующие шаги

1. ✅ Очистить БД (скрипт готов)
2. ✅ Назначить глобального админа (скрипт готов)
3. ⬜ Авторизовать Telethon сессию
4. ⬜ Написать conftest.py с фикстурами
5. ⬜ Реализовать helper-функции
6. ⬜ Написать тесты P0 (TP-001 до TP-003)
7. ⬜ Написать тесты P1
8. ⬜ Написать тесты P2-P3
9. ⬜ Настроить CI/CD для автозапуска

---

**Контакт:** Тимлид проекта для вопросов и согласований
