# üöÄ –ü–û–õ–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ó–ê–ü–£–°–ö–£

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)

### –®–∞–≥ 1: –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏)

```bash
git clone https://github.com/your-repo/project.git
cd project
```

### –®–∞–≥ 2: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É —Å —Ç–µ—Å—Ç–∞–º–∏

```bash
cd tests/e2e
```

### –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

```bash
# –í–∞—Ä–∏–∞–Ω—Ç 1: —á–µ—Ä–µ–∑ pip
pip install -r requirements.txt

# –í–∞—Ä–∏–∞–Ω—Ç 2: —á–µ—Ä–µ–∑ make
make install
```

---

## üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

### üöÄ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞)**

```bash
python quick_start.py
```

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
- –ü–æ–∫–∞–∂–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
- –ó–∞–ø—É—Å—Ç–∏—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
- –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á—ë—Ç
- –ü–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è

---

### ‚ö° **–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (CI/CD)**

```bash
# –ß–µ—Ä–µ–∑ pytest
pytest -m critical -v

# –ß–µ—Ä–µ–∑ make
make test-critical
```

–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ ~5 –º–∏–Ω—É—Ç, –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏.

---

### üìä **–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤**

```bash
# –ß–µ—Ä–µ–∑ pytest
pytest -v

# –ß–µ—Ä–µ–∑ make
make test-all

# –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º
make coverage
```

–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ ~15 –º–∏–Ω—É—Ç, –ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ.

---

### üéØ **–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è**

```bash
# –°—Ü–µ–Ω–∞—Ä–∏–π 1 (Happy Path)
pytest test_order_lifecycle_all_scenarios.py::test_scenario_1_happy_path -v

# –°—Ü–µ–Ω–∞—Ä–∏–π 5 (–ì–∞—Ä–∞–Ω—Ç–∏–π–∫–∞)
pytest test_additional_scenarios.py::test_scenario_5_warranty_request -v

# –ß–µ—Ä–µ–∑ make
make test-scenario SCENARIO=1
```

---

### üîç **–ó–∞–ø—É—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º**

```bash
# –¢–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
pytest -m finance -v

# –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
pytest -m autoassign -v

# –í—Å—ë –∫—Ä–æ–º–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö
pytest -m "not slow" -v
```

---

## üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

### 1. **–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥**

–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏:

```
================================================================================
üéØ –°–¶–ï–ù–ê–†–ò–ô 1: HAPPY PATH - –ü–æ–ª–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ü–∏–∫–ª –∑–∞–∫–∞–∑–∞
================================================================================

–≠–¢–ê–ü 1: –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞—ë—Ç –∑–∞–∫–∞–∑
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

  üë§ –ö–ª–∏–µ–Ω—Ç (ID=1000): –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–æ—Ç–∞
  üì• –ö–ª–∏–µ–Ω—Ç ‚Üí –ë–æ—Ç: /start
  üîÑ FSM[–ö–ª–∏–µ–Ω—Ç]: None ‚Üí MainMenu
  üì± –ë–æ—Ç ‚Üí –ö–ª–∏–µ–Ω—Ç: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:... [+ –∫–Ω–æ–ø–∫–∏]
  ...

‚úÖ –£–°–ü–ï–•: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'searching'
```

---

### 2. **HTML-–æ—Ç—á—ë—Ç** (test_report.html)

```bash
# –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ
start test_report.html      # Windows
open test_report.html        # macOS
xdg-open test_report.html    # Linux
```

–°–æ–¥–µ—Ä–∂–∏—Ç:
- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (PASS/FAIL)
- –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
- –¶–≤–µ—Ç–æ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è

---

### 3. **Coverage –æ—Ç—á—ë—Ç** (htmlcov/index.html)

```bash
# –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
pytest --cov --cov-report=html

# –û—Ç–∫—Ä–æ–π—Ç–µ –æ—Ç—á—ë—Ç
start htmlcov/index.html
```

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
- % –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ —Ñ–∞–π–ª–∞–º
- –ù–µ–ø–æ–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
- –ì—Ä–∞—Ñ–∏–∫–∏

---

### 4. **Markdown –æ—Ç—á—ë—Ç** (coverage_report.md)

```bash
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
python coverage_analyzer.py

# –ü—Ä–æ—á–∏—Ç–∞—Ç—å
cat coverage_report.md
```

---

## üõ† –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤

### 1. **–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª** (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)

```bash
# –î–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
touch test_my_new_scenarios.py
```

### 2. **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —à–∞–±–ª–æ–Ω**

```python
import pytest
from test_order_lifecycle_all_scenarios import TestLogger

@pytest.mark.e2e
async def test_scenario_N_my_scenario(bot_client, bot_master, db):
    """
    –°–¶–ï–ù–ê–†–ò–ô N: –û–ø–∏—Å–∞–Ω–∏–µ
    
    –§–ª–æ—É: ...
    """
    log = TestLogger()
    log.section("–°–¶–ï–ù–ê–†–ò–ô N: –ù–∞–∑–≤–∞–Ω–∏–µ")
    
    # –í–∞—à —Ç–µ—Å—Ç
    log.action("–ö—Ç–æ-—Ç–æ", "–î–µ–ª–∞–µ—Ç —á—Ç–æ-—Ç–æ")
    log.db_write("orders", "INSERT", {...})
    log.assertion("–ü—Ä–æ–≤–µ—Ä–∫–∞", True)
    
    log.success("‚úÖ –°–¶–ï–ù–ê–†–ò–ô N –ó–ê–í–ï–†–®–Å–ù")
    return log.logs
```

### 3. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ**

```bash
pytest test_my_new_scenarios.py::test_scenario_N_my_scenario -v
```

---

## üêõ –û—Ç–ª–∞–¥–∫–∞ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤

### 1. **–í–∫–ª—é—á–∏—Ç–µ verbose —Ä–µ–∂–∏–º**

```bash
pytest -vv --tb=long
```

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π traceback.

---

### 2. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ç–µ—Å—Ç —Å –æ—Ç–ª–∞–¥–∫–æ–π**

```bash
pytest test_file.py::test_name -vv -s
```

`-s` –æ—Ç–∫–ª—é—á–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç stdout (–≤–∏–¥–Ω—ã print()).

---

### 3. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ pdb (Python debugger)**

```python
async def test_something():
    order = create_order()
    
    import pdb; pdb.set_trace()  # –ë—Ä–µ–π–∫–ø–æ–∏–Ω—Ç
    
    assert order.status == "created"
```

```bash
pytest test_file.py::test_something
```

–û—Ç–∫—Ä–æ–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–ª–∞–¥—á–∏–∫.

---

### 4. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Ç–µ—Å—Ç–∞**

–ü–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ `test_report.html` - —Ç–∞–º –±—É–¥—É—Ç –≤—Å–µ –ª–æ–≥–∏ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–∞–¥–µ–Ω–∏—è.

---

## üîß CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

### GitHub Actions

–§–∞–π–ª `.github/workflows/e2e-tests.yml` —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!

–ü—Ä–∏ –∫–∞–∂–¥–æ–º push:
1. –ó–∞–ø—É—Å–∫–∞—é—Ç—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è coverage
3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ PR
4. –ü—Ä–∏ fail - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram

**–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**

1. –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ GitHub:
   - `TELEGRAM_BOT_TOKEN`
   - `TELEGRAM_CHAT_ID`

2. Push –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:

```bash
git add .
git commit -m "Add E2E tests"
git push
```

3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É "Actions" –Ω–∞ GitHub

---

### GitLab CI

–°–æ–∑–¥–∞–π—Ç–µ `.gitlab-ci.yml`:

```yaml
test:e2e:
  stage: test
  image: python:3.11
  services:
    - postgres:15
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
  script:
    - cd tests/e2e
    - pip install -r requirements.txt
    - pytest -m critical -v --cov
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: tests/e2e/coverage.xml
    paths:
      - tests/e2e/htmlcov/
      - tests/e2e/test_report.html
```

---

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ

```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
pytest --cov --cov-report=term

# –í—ã–≤–æ–¥:
# FSM –ø–µ—Ä–µ—Ö–æ–¥—ã          95%
# –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ    100%
# –ë–î —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏         90%
# ...
```

---

### –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤

```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
pytest --cov --cov-report=json

# –°—Ä–∞–≤–Ω–∏—Ç–µ coverage.json –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
python compare_coverage.py coverage_v1.json coverage_v2.json
```

---

## üéì –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

```bash
# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
pytest --collect-only

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
pytest --markers

# –ó–∞–ø—É—Å–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
pytest --timeout=60

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (—Ç—Ä–µ–±—É–µ—Ç pytest-xdist)
pytest -n 4

# –¢–æ–ª—å–∫–æ —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
pytest --lf

# –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
pytest -x

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
pytest --durations=10
```

---

## üÜò –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

### –ü—Ä–æ–±–ª–µ–º–∞ 1: ModuleNotFoundError

```bash
# –†–µ—à–µ–Ω–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pip install -r requirements.txt
```

---

### –ü—Ä–æ–±–ª–µ–º–∞ 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω
pg_isready

# –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker
docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=test postgres:15
```

---

### –ü—Ä–æ–±–ª–µ–º–∞ 3: –¢–µ—Å—Ç—ã –∑–∞–≤–∏—Å–∞—é—Ç

```bash
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–π–º–∞—É—Ç—ã
pytest --timeout=30
```

---

### –ü—Ä–æ–±–ª–µ–º–∞ 4: –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤

```bash
# –ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç –≤ .env
TEST_DB_PORT=5433
```

---

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–í–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ–±–ª–µ–º—ã?

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ [BEST_PRACTICES.md](BEST_PRACTICES.md)
2. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ [–ø—Ä–∏–º–µ—Ä—ã](test_order_lifecycle_all_scenarios.py)
3. –°–æ–∑–¥–∞–π—Ç–µ issue –Ω–∞ GitHub
4. –ù–∞–ø–∏—à–∏—Ç–µ –≤ Telegram: @your_support

---

## üéâ –ì–æ—Ç–æ–≤–æ!

–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π!

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**

1. ‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç–µ `python quick_start.py`
2. ‚úÖ –ò–∑—É—á–∏—Ç–µ `test_report.html`
3. ‚úÖ –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏
4. ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –≤ CI/CD
5. ‚úÖ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∫–∞—á–µ—Å—Ç–≤–æ–º! üöÄ
