#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–æ–¥–µ–ª–µ–π SQLAlchemy –∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ –º–æ–¥–µ–ª—è—Ö –∏ –ë–î
2. –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
3. Foreign key constraints
4. Unique constraints
5. Indexes
"""

import sys
from typing import Dict, List, Set, Tuple
from sqlalchemy import inspect, MetaData
from sqlalchemy.engine import Engine

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
try:
    from field_service.db.models import Base
    from field_service.db.session import engine
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ field-service")
    sys.exit(1)


class ModelChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –ë–î."""
    
    def __init__(self, engine: Engine):
        self.engine = engine
        self.inspector = inspect(engine)
        self.errors: List[str] = []
        self.warnings: List[str] = []
        self.success: List[str] = []
    
    def check_all(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Å—ë OK."""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–æ–¥–µ–ª–µ–π –∏ –ë–î...\n")
        
        tables_to_check = [
            "orders",
            "commissions",
            "offers",
            "staff_access_codes"
        ]
        
        all_ok = True
        for table_name in tables_to_check:
            if not self.check_table(table_name):
                all_ok = False
        
        self._print_results()
        return all_ok
    
    def check_table(self, table_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–µ–ª–∏
        table = Base.metadata.tables.get(table_name)
        if not table:
            self.errors.append(f"‚ùå {table_name}: —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª—è—Ö")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        try:
            db_columns = {col['name']: col for col in self.inspector.get_columns(table_name)}
            db_fks = self.inspector.get_foreign_keys(table_name)
            db_indexes = self.inspector.get_indexes(table_name)
            db_unique_constraints = self.inspector.get_unique_constraints(table_name)
        except Exception as e:
            self.errors.append(f"‚ùå {table_name}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î - {e}")
            return False
        
        table_ok = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        model_columns = {col.name for col in table.columns}
        db_column_names = set(db_columns.keys())
        
        # –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î
        missing_in_db = model_columns - db_column_names
        if missing_in_db:
            for col in missing_in_db:
                self.errors.append(f"  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{col}' –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                table_ok = False
        
        # –õ–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î
        extra_in_db = db_column_names - model_columns
        if extra_in_db:
            for col in extra_in_db:
                self.warnings.append(f"  ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col}' –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        for col_name in model_columns & db_column_names:
            model_col = table.columns[col_name]
            db_col = db_columns[col_name]
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
            model_type = str(model_col.type).split('(')[0].lower()
            db_type = str(db_col['type']).split('(')[0].lower()
            
            if model_type != db_type and not self._types_compatible(model_type, db_type):
                self.warnings.append(
                    f"  ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col_name}': —Ç–∏–ø –≤ –º–æ–¥–µ–ª–∏ ({model_type}) "
                    f"–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ë–î ({db_type})"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Foreign Keys
        if table_name in ["orders", "commissions", "offers", "staff_access_codes"]:
            fk_ok = self._check_foreign_keys(table_name, table, db_fks)
            table_ok = table_ok and fk_ok
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UNIQUE constraints
        unique_ok = self._check_unique_constraints(table_name, table, db_unique_constraints)
        table_ok = table_ok and unique_ok
        
        if table_ok and not self.warnings:
            self.success.append(f"‚úÖ {table_name}: OK")
        
        return table_ok
    
    def _check_foreign_keys(self, table_name: str, table, db_fks: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç foreign keys."""
        # –û–∂–∏–¥–∞–µ–º—ã–µ FK –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        expected_fks = {
            "orders": [],
            "commissions": [
                ("order_id", "orders"),
                ("master_id", "masters"),
            ],
            "offers": [
                ("order_id", "orders"),
                ("master_id", "masters"),  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            ],
            "staff_access_codes": [
                ("created_by_staff_id", "staff_users"),  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω
                ("used_by_staff_id", "staff_users"),
            ],
        }
        
        if table_name not in expected_fks:
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º FK –∏–∑ –ë–î
        db_fk_map = {}
        for fk in db_fks:
            for col in fk['constrained_columns']:
                db_fk_map[col] = fk['referred_table']
        
        all_ok = True
        for col, ref_table in expected_fks[table_name]:
            if col not in db_fk_map:
                self.errors.append(
                    f"  ‚ùå FK –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {col} ‚Üí {ref_table}"
                )
                all_ok = False
            elif db_fk_map[col] != ref_table:
                self.errors.append(
                    f"  ‚ùå FK –Ω–µ–≤–µ—Ä–Ω—ã–π: {col} ‚Üí {db_fk_map[col]} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {ref_table})"
                )
                all_ok = False
            else:
                self.success.append(f"  ‚úÖ FK OK: {col} ‚Üí {ref_table}")
        
        return all_ok
    
    def _check_unique_constraints(self, table_name: str, table, db_unique: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç UNIQUE constraints."""
        # –û–∂–∏–¥–∞–µ–º—ã–µ UNIQUE –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        expected_unique = {
            "commissions": [
                {"name": "order_id", "reason": "–ö–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –∏–º–µ–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–º–∏—Å—Å–∏—é"}
            ],
        }
        
        if table_name not in expected_unique:
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º UNIQUE –∏–∑ –ë–î
        db_unique_cols = set()
        for uc in db_unique:
            if uc.get('column_names'):
                # –î–ª—è single-column UNIQUE
                if len(uc['column_names']) == 1:
                    db_unique_cols.add(uc['column_names'][0])
        
        all_ok = True
        for expected in expected_unique[table_name]:
            col_name = expected['name']
            reason = expected['reason']
            
            if col_name not in db_unique_cols:
                self.errors.append(
                    f"  ‚ùå UNIQUE constraint –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {col_name} ({reason})"
                )
                all_ok = False
            else:
                self.success.append(f"  ‚úÖ UNIQUE OK: {col_name}")
        
        return all_ok
    
    def _types_compatible(self, model_type: str, db_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤."""
        compatible_pairs = [
            ("integer", "bigint"),
            ("bigint", "integer"),
            ("varchar", "text"),
            ("text", "varchar"),
            ("numeric", "decimal"),
            ("decimal", "numeric"),
            ("timestamp", "timestamptz"),
            ("timestamptz", "timestamp"),
        ]
        
        return (model_type, db_type) in compatible_pairs
    
    def _print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò")
        print("=" * 60)
        
        if self.success:
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ ({len(self.success)}):")
            for msg in self.success:
                print(msg)
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.warnings)}):")
            for msg in self.warnings:
                print(msg)
        
        if self.errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for msg in self.errors:
                print(msg)
        
        print("\n" + "=" * 60)
        if self.errors:
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ü–†–û–í–ê–õ–ï–ù–ê - –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é Alembic")
        elif self.warnings:
            print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
            print("–ú–æ–¥–µ–ª–∏ –∏ –ë–î –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –£–°–ü–ï–®–ù–ê - –º–æ–¥–µ–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ë–î")
        print("=" * 60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    checker = ModelChecker(engine)
    success = checker.check_all()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
