#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –∫–æ–¥–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª.
–ò—Å–∫–ª—é—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –ª–æ–≥–∏, –∫—ç—à –∏ –¥—Ä—É–≥–∏–µ –Ω–µ-–∫–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã.

Usage:
    python tools/collect_code.py
    python tools/collect_code.py --output code_export.txt
    python tools/collect_code.py --format markdown
"""

from __future__ import annotations

import argparse
import os
from datetime import datetime
from pathlib import Path
from typing import Iterator

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======

# –í–∫–ª—é—á–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–∫–æ–¥)
INCLUDE_EXTENSIONS = {
    '.py',           # Python
    '.sql',          # SQL
    '.ini',          # Config
    '.toml',         # Config
    '.yaml', '.yml', # Config
    '.json',         # Config/Data
    '.env.example',  # Config template
    '.sh',           # Shell scripts
    '.bat',          # Batch scripts
    '.js',           # JavaScript (–µ—Å–ª–∏ –µ—Å—Ç—å)
    '.html',         # HTML (–µ—Å–ª–∏ –µ—Å—Ç—å)
    '.css',          # CSS (–µ—Å–ª–∏ –µ—Å—Ç—å)
}

# –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø—Ä–æ—á–µ–µ)
EXCLUDE_EXTENSIONS = {
    '.md',           # Markdown
    '.txt',          # Text
    '.log',          # Logs
    '.png', '.jpg', '.jpeg', '.gif', '.svg', '.ico',  # Images
    '.pdf', '.doc', '.docx',  # Documents
    '.zip', '.tar', '.gz',     # Archives
    '.pyc', '.pyo',            # Python bytecode
    '.lock',                   # Lock files
    '.bak', '.backup',         # Backups
}

# –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
EXCLUDE_DIRS = {
    '__pycache__',
    '.git',
    '.venv',
    'venv',
    'env',
    '.mypy_cache',
    '.pytest_cache',
    '.ruff_cache',
    'node_modules',
    '.idea',
    '.vscode',
    'dist',
    'build',
    '*.egg-info',
}

# –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
EXCLUDE_FILES = {
    '.DS_Store',
    'Thumbs.db',
    '.gitignore',
    '.gitattributes',
    '.editorconfig',
    '.pre-commit-config.yaml',
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (10 MB)
MAX_FILE_SIZE = 10 * 1024 * 1024


# ====== –û–°–ù–û–í–ù–û–ô –ö–û–î ======

def should_include_file(file_path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª –≤ —Å–±–æ—Ä–∫—É."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if file_path.name in EXCLUDE_FILES:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if any(file_path.name.endswith(ext) for ext in EXCLUDE_EXTENSIONS):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –≤–∫–ª—é—á–µ–Ω–∏—è
    if not any(file_path.name.endswith(ext) for ext in INCLUDE_EXTENSIONS):
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if file_path.suffix == '':
            # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            known_no_ext = {'Dockerfile', 'Makefile', 'Procfile'}
            if file_path.name not in known_no_ext:
                return False
        else:
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    try:
        if file_path.stat().st_size > MAX_FILE_SIZE:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path} (>{MAX_FILE_SIZE/1024/1024:.1f} MB)")
            return False
    except OSError:
        return False
    
    return True


def should_skip_directory(dir_path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
    dir_name = dir_path.name
    
    # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if dir_name in EXCLUDE_DIRS:
        return True
    
    # –°–∫—Ä—ã—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ç–æ—á–∫–∏)
    if dir_name.startswith('.'):
        # –ù–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω—ã–µ
        if dir_name not in {'.github', '.docker'}:
            return True
    
    return False


def collect_files(root_dir: Path) -> Iterator[Path]:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
    for current_dir, subdirs, files in os.walk(root_dir):
        current_path = Path(current_dir)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ in-place)
        subdirs[:] = [d for d in subdirs if not should_skip_directory(current_path / d)]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for file_name in files:
            file_path = current_path / file_name
            
            if should_include_file(file_path):
                yield file_path


def format_as_text(files: list[tuple[Path, str]], root_dir: Path) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    output = []
    output.append("=" * 80)
    output.append(f"PROJECT CODE EXPORT")
    output.append(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    output.append(f"Root: {root_dir}")
    output.append(f"Files: {len(files)}")
    output.append("=" * 80)
    output.append("")
    
    for file_path, content in files:
        relative_path = file_path.relative_to(root_dir)
        output.append("")
        output.append("=" * 80)
        output.append(f"FILE: {relative_path}")
        output.append("=" * 80)
        output.append("")
        output.append(content)
        output.append("")
    
    return "\n".join(output)


def format_as_markdown(files: list[tuple[Path, str]], root_dir: Path) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ Markdown —Ñ–æ—Ä–º–∞—Ç."""
    output = []
    output.append(f"# Project Code Export")
    output.append(f"")
    output.append(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  ")
    output.append(f"**Root:** `{root_dir}`  ")
    output.append(f"**Files:** {len(files)}  ")
    output.append(f"")
    output.append(f"---")
    output.append(f"")
    
    # –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ
    output.append(f"## Table of Contents")
    output.append(f"")
    for idx, (file_path, _) in enumerate(files, 1):
        relative_path = file_path.relative_to(root_dir)
        anchor = str(relative_path).replace('/', '-').replace('\\', '-').replace('.', '')
        output.append(f"{idx}. [{relative_path}](#{anchor})")
    output.append(f"")
    output.append(f"---")
    output.append(f"")
    
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
    for file_path, content in files:
        relative_path = file_path.relative_to(root_dir)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        ext_to_lang = {
            '.py': 'python',
            '.sql': 'sql',
            '.sh': 'bash',
            '.bat': 'batch',
            '.js': 'javascript',
            '.html': 'html',
            '.css': 'css',
            '.json': 'json',
            '.yaml': 'yaml',
            '.yml': 'yaml',
            '.toml': 'toml',
            '.ini': 'ini',
        }
        lang = ext_to_lang.get(file_path.suffix, '')
        
        output.append(f"## {relative_path}")
        output.append(f"")
        output.append(f"```{lang}")
        output.append(content)
        output.append(f"```")
        output.append(f"")
    
    return "\n".join(output)


def main() -> int:
    parser = argparse.ArgumentParser(
        description='Collect all code files from the project',
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        '--output', '-o',
        type=str,
        default='code_export.txt',
        help='Output file path (default: code_export.txt)',
    )
    parser.add_argument(
        '--format', '-f',
        type=str,
        choices=['text', 'markdown'],
        default='text',
        help='Output format (default: text)',
    )
    parser.add_argument(
        '--root', '-r',
        type=str,
        default=None,
        help='Project root directory (default: current directory)',
    )
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if args.root:
        root_dir = Path(args.root).resolve()
    else:
        # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç)
        script_dir = Path(__file__).resolve().parent
        root_dir = script_dir.parent  # tools/ -> project/
    
    if not root_dir.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {root_dir}")
        return 1
    
    print(f"üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {root_dir}")
    print(f"üîç –ò—â–µ–º –∫–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã...")
    print()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
    collected_files: list[tuple[Path, str]] = []
    total_size = 0
    
    for file_path in collect_files(root_dir):
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = file_path.read_text(encoding='utf-8', errors='ignore')
            collected_files.append((file_path, content))
            total_size += file_path.stat().st_size
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            relative_path = file_path.relative_to(root_dir)
            print(f"‚úì {relative_path}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
            continue
    
    print()
    print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(collected_files)}")
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / 1024 / 1024:.2f} MB")
    print()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {args.format}")
    
    if args.format == 'markdown':
        output_content = format_as_markdown(collected_files, root_dir)
    else:
        output_content = format_as_text(collected_files, root_dir)
    
    output_path = Path(args.output)
    output_path.write_text(output_content, encoding='utf-8')
    
    output_size = output_path.stat().st_size / 1024 / 1024
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path} ({output_size:.2f} MB)")
    print()
    print(f"üéâ –ì–æ—Ç–æ–≤–æ!")
    
    return 0


if __name__ == '__main__':
    raise SystemExit(main())
