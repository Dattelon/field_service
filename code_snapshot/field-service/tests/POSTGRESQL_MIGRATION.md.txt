# üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê POSTGRESQL –í –¢–ï–°–¢–ê–•

## ‚úÖ –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ

1. **–£–¥–∞–ª—ë–Ω SQLite** –∏–∑ `conftest.py`
2. **–î–æ–±–∞–≤–ª–µ–Ω PostgreSQL** —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
3. **–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î** `field_service_test`

## üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞

- ‚úÖ –í—Å–µ PostgreSQL —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç (`NOW()`, `pg_try_advisory_lock()`, JSONB, etc.)
- ‚úÖ –ü–æ–ª–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å test/dev/prod –æ–∫—Ä—É–∂–µ–Ω–∏–π
- ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- ‚úÖ –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é SQL –¥–∏–∞–ª–µ–∫—Ç–æ–≤

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (conftest.py):
```python
TEST_DATABASE_URL = "postgresql+asyncpg://fs_user:fs_password@localhost:5439/field_service_test"
```

### –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
```bash
export TEST_DATABASE_URL="postgresql+asyncpg://fs_user:fs_password@localhost:5439/field_service_test"
```

## üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ fixtures

### Session-scoped (—Å–æ–∑–¥–∞—ë—Ç—Å—è 1 —Ä–∞–∑):
- `engine` - Engine –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤

### Function-scoped (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞):
- `async_session` / `session` - –ß–∏—Å—Ç–∞—è –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
- `sample_city` - –¢–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥
- `sample_district` - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–π–æ–Ω  
- `sample_skill` - –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫
- `sample_master` - –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Å –Ω–∞–≤—ã–∫–æ–º –∏ —Ä–∞–π–æ–Ω–æ–º

## üßπ –û—á–∏—Å—Ç–∫–∞ –ë–î –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `TRUNCATE CASCADE` (–±—ã—Å—Ç—Ä–æ) —Å fallback –Ω–∞ `DELETE` (–º–µ–¥–ª–µ–Ω–Ω–æ):

```python
async def _clean_database(session: AsyncSession) -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    try:
        for table in tables_to_clean:
            await session.execute(sa.text(f"TRUNCATE TABLE {table} CASCADE"))
        await session.commit()
    except Exception:
        # Fallback –Ω–∞ DELETE
        ...
```

## üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

### –í—Å–µ —Ç–µ—Å—Ç—ã:
```powershell
cd C:\ProjectF\field-service
$env:PYTHONIOENCODING='utf-8'
pytest tests/ -v
```

### –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª:
```powershell
pytest tests/test_step_2_logical_improvements.py -v -s
```

### –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º:
```powershell
pytest tests/ --cov=field_service --cov-report=html
```

## üêõ Troubleshooting

### –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è:
```powershell
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
docker ps

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î
docker exec field-service-postgres-1 psql -U fs_user -d field_service_test -c "\l"
```

### –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ë–î:
```powershell
docker exec field-service-postgres-1 psql -U fs_user -d field_service -c "DROP DATABASE IF EXISTS field_service_test;"
docker exec field-service-postgres-1 psql -U fs_user -d field_service -c "CREATE DATABASE field_service_test;"
```

### –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é:
```sql
DO $$ 
DECLARE 
    r RECORD;
BEGIN
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
        EXECUTE 'TRUNCATE TABLE ' || quote_ident(r.tablename) || ' CASCADE';
    END LOOP;
END $$;
```

## üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

- **–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫**: ~2-3 —Å–µ–∫—É–Ω–¥—ã (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü)
- **–ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Å—Ç—ã**: ~100-200ms –Ω–∞ —Ç–µ—Å—Ç (TRUNCATE)
- **Session-scoped engine**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω connection pool

## ‚ö†Ô∏è –í–∞–∂–Ω–æ

1. **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ production –ë–î** –¥–ª—è —Ç–µ—Å—Ç–æ–≤!
2. **–¢–µ—Å—Ç–æ–≤–∞—è –ë–î –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π**: `field_service_test`
3. **–¢–µ—Å—Ç—ã –æ—á–∏—â–∞—é—Ç –ë–î**: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

## üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç:
```python
@pytest.mark.asyncio
async def test_something(session: AsyncSession, sample_city: m.cities):
    order = m.orders(city_id=sample_city.id, status="SEARCHING")
    session.add(order)
    await session.commit()
    
    result = await session.execute(select(m.orders))
    assert result.scalar_one().status == "SEARCHING"
```

### –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NOW():
```python
@pytest.mark.asyncio
async def test_with_db_time(session: AsyncSession):
    row = await session.execute(text("SELECT NOW()"))
    db_now = row.scalar()
    # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç! 
```

### –° advisory lock:
```python
@pytest.mark.asyncio  
async def test_with_lock(session: AsyncSession):
    row = await session.execute(text("SELECT pg_try_advisory_lock(123)"))
    locked = row.scalar()
    assert locked is True
    # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!
```
