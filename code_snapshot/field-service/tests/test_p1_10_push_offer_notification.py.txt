"""
P1-10: –¢–µ—Å—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞—Ö

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞ –º–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
"""
import pytest
from datetime import datetime, timezone, timedelta
from sqlalchemy import text, select

from field_service.db import models as m
from field_service.services.distribution_scheduler import tick_once, _load_config
from field_service.services.push_notifications import NotificationEvent


@pytest.mark.asyncio
async def test_offer_push_notification(async_session):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä–∞ –º–∞—Å—Ç–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    
    # 1. –°–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥
    city = m.cities(name="–ú–æ—Å–∫–≤–∞", timezone="Europe/Moscow")
    async_session.add(city)
    await async_session.flush()
    
    # 2. –°–æ–∑–¥–∞—Ç—å —Ä–∞–π–æ–Ω
    district = m.districts(city_id=city.id, name="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π")
    async_session.add(district)
    await async_session.flush()
    
    # 3. –°–æ–∑–¥–∞—Ç—å –Ω–∞–≤—ã–∫
    skill = m.skills(name="–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", code="ELEC", is_active=True)
    async_session.add(skill)
    await async_session.flush()
    
    # 4. –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞
    master = m.masters(
        telegram_user_id=12345,
        full_name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        phone="+79001234567",
        city_id=city.id,
        is_active=True,
        verified=True,
        is_on_shift=True,
        max_active_orders_override=5,
    )
    async_session.add(master)
    await async_session.flush()
    
    # 5. –°–≤—è–∑–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞ —Å —Ä–∞–π–æ–Ω–æ–º
    master_district = m.master_districts(master_id=master.id, district_id=district.id)
    async_session.add(master_district)
    await async_session.flush()
    
    # 6. –°–≤—è–∑–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞ —Å –Ω–∞–≤—ã–∫–æ–º
    master_skill = m.master_skills(master_id=master.id, skill_id=skill.id)
    async_session.add(master_skill)
    await async_session.flush()
    
    # 7. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    now = datetime.now(timezone.utc)
    order = m.orders(
        city_id=city.id,
        district_id=district.id,
        status=m.OrderStatus.SEARCHING,
        category=m.OrderCategory.ELECTRICS,
        type=m.OrderType.NORMAL,
        created_at=now,
        timeslot_start_utc=now + timedelta(hours=2),
        timeslot_end_utc=now + timedelta(hours=4),
        client_name="–ö–ª–∏–µ–Ω—Ç",
        client_phone="+79009999999",
        address_street="–£–ª–∏—Ü–∞",
        address_house="1",
    )
    async_session.add(order)
    await async_session.flush()
    await async_session.commit()
    
    # 8. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    cfg = await _load_config()
    await tick_once(cfg, bot=None, alerts_chat_id=None, session=async_session)
    
    # 9. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ—Ñ—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω
    async_session.expire_all()
    result = await async_session.execute(
        select(m.offers)
        .where(m.offers.order_id == order.id)
        .where(m.offers.master_id == master.id)
    )
    offer = result.scalar_one_or_none()
    assert offer is not None, "–û—Ñ—Ñ–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
    assert offer.state == m.OfferState.SENT, "–û—Ñ—Ñ–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ SENT"
    
    # 10. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ outbox
    result = await async_session.execute(
        select(m.notifications_outbox)
        .where(m.notifications_outbox.master_id == master.id)
        .where(m.notifications_outbox.event == NotificationEvent.NEW_OFFER.value)
    )
    notification = result.scalar_one_or_none()
    assert notification is not None, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ outbox"
    
    # 11. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    payload = notification.payload
    assert payload is not None
    assert "message" in payload
    assert str(order.id) in payload["message"], "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID –∑–∞–∫–∞–∑–∞"
    assert "–ú–æ—Å–∫–≤–∞" in payload["message"], "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ä–æ–¥"
    assert "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π" in payload["message"], "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–π–æ–Ω"
    assert "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞" in payload["message"], "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    
    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {payload['message']}")


@pytest.mark.asyncio
async def test_notification_format(async_session):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    from field_service.services.distribution_scheduler import _get_order_notification_data
    
    # 1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    city = m.cities(name="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", timezone="Europe/Moscow")
    async_session.add(city)
    await async_session.flush()
    
    district = m.districts(city_id=city.id, name="–ù–µ–≤—Å–∫–∏–π")
    async_session.add(district)
    await async_session.flush()
    
    now = datetime.now(timezone.utc)
    order = m.orders(
        city_id=city.id,
        district_id=district.id,
        status=m.OrderStatus.SEARCHING,
        category=m.OrderCategory.PLUMBING,
        type=m.OrderType.NORMAL,
        created_at=now,
        timeslot_start_utc=now + timedelta(hours=1),
        timeslot_end_utc=now + timedelta(hours=3),
        client_name="–¢–µ—Å—Ç",
        client_phone="+79001111111",
        address_street="–£–ª–∏—Ü–∞",
        address_house="1",
    )
    async_session.add(order)
    await async_session.flush()
    await async_session.commit()
    
    # 2. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    data = await _get_order_notification_data(async_session, order.id)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    assert data["order_id"] == order.id
    assert data["city"] == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    assert data["district"] == "–ù–µ–≤—Å–∫–∏–π"
    assert data["category"] == "üö∞ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞"
    assert ":" in data["timeslot"], "Timeslot –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–º—è"
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data}")


@pytest.mark.asyncio
async def test_notification_without_district(async_session):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –±–µ–∑ —Ä–∞–π–æ–Ω–∞."""
    from field_service.services.distribution_scheduler import _get_order_notification_data
    
    # 1. –°–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥
    city = m.cities(name="–ö–∞–∑–∞–Ω—å", timezone="Europe/Moscow")
    async_session.add(city)
    await async_session.flush()
    
    now = datetime.now(timezone.utc)
    order = m.orders(
        city_id=city.id,
        district_id=None,  # –ë–µ–∑ —Ä–∞–π–æ–Ω–∞
        status=m.OrderStatus.SEARCHING,
        category=m.OrderCategory.HANDYMAN,
        type=m.OrderType.NORMAL,
        created_at=now,
        client_name="–¢–µ—Å—Ç",
        client_phone="+79001111111",
        address_street="–£–ª–∏—Ü–∞",
        address_house="1",
    )
    async_session.add(order)
    await async_session.flush()
    await async_session.commit()
    
    data = await _get_order_notification_data(async_session, order.id)
    
    assert data["district"] == "–Ω–µ —É–∫–∞–∑–∞–Ω", "–î–ª—è –∑–∞–∫–∞–∑–∞ –±–µ–∑ —Ä–∞–π–æ–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '–Ω–µ —É–∫–∞–∑–∞–Ω'"
    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–π–æ–Ω–∞: {data}")
