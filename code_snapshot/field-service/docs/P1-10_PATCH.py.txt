"""
P1-10: Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–∞—Ö
–ü–∞—Ç—á –¥–ª—è distribution_scheduler.py
"""

# ============================================================================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç notify_master
# ============================================================================
# –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É:
from field_service.services.push_notifications import notify_admin, NotificationEvent

# –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞:
from field_service.services.push_notifications import notify_admin, notify_master, NotificationEvent


# ============================================================================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
# ============================================================================
# –í—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ _db_now (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 150):

async def _get_order_notification_data(
    session: AsyncSession, order_id: int
) -> dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞."""
    from typing import Any
    
    result = await session.execute(
        text("""
            SELECT 
                o.id,
                c.name AS city_name,
                d.name AS district_name,
                o.timeslot_start_utc,
                o.timeslot_end_utc,
                o.category
            FROM orders o
            JOIN cities c ON c.id = o.city_id
            LEFT JOIN districts d ON d.id = o.district_id
            WHERE o.id = :order_id
        """).bindparams(order_id=order_id)
    )
    row = result.mappings().first()
    if not row:
        return {}
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º timeslot
    timeslot = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    if row["timeslot_start_utc"] and row["timeslot_end_utc"]:
        start = row["timeslot_start_utc"]
        end = row["timeslot_end_utc"]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        tz = time_service.resolve_timezone("Europe/Moscow")  # TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å timezone –≥–æ—Ä–æ–¥–∞
        start_local = start.astimezone(tz)
        end_local = end.astimezone(tz)
        timeslot = f"{start_local.strftime('%H:%M')}-{end_local.strftime('%H:%M')}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category_labels = {
        "ELECTRICS": "‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
        "PLUMBING": "üö∞ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
        "APPLIANCES": "üîå –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
        "WINDOWS": "ü™ü –û–∫–Ω–∞",
        "HANDYMAN": "üîß –ú–µ–ª–∫–∏–π —Ä–µ–º–æ–Ω—Ç",
        "ROADSIDE": "üöó –ü–æ–º–æ—â—å –Ω–∞ –¥–æ—Ä–æ–≥–µ",
    }
    category = category_labels.get(row["category"], row["category"] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    
    return {
        "order_id": order_id,
        "city": row["city_name"] or "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "district": row["district_name"] or "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "timeslot": timeslot,
        "category": category,
    }


# ============================================================================
# –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ notify_master –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
# ============================================================================
# –ù–∞–π—Ç–∏ –±–ª–æ–∫ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 1095-1120):

        if ok:
            until_row = await session.execute(
                text("SELECT NOW() + make_interval(secs => :sla)").bindparams(
                    sla=cfg.sla_seconds
                )
            )
            until = until_row.scalar()
            message = f"[dist] order={order.id} decision=offer mid={first_mid} until={until.isoformat()}"
            logger.info(message)
            _dist_log(message)
            
            # ‚úÖ STEP 4.2: Structured logging - offer sent
            log_distribution_event(
                DistributionEvent.OFFER_SENT,
                order_id=order.id,
                master_id=first_mid,
                round_number=next_round,
                sla_seconds=cfg.sla_seconds,
                expires_at=until,
            )

# –î–æ–±–∞–≤–∏—Ç—å –ü–û–°–õ–ï log_distribution_event:

            # ‚úÖ P1-10: –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É –æ –Ω–æ–≤–æ–º –æ—Ñ—Ñ–µ—Ä–µ
            try:
                order_data = await _get_order_notification_data(session, order.id)
                if order_data:
                    await notify_master(
                        session,
                        master_id=first_mid,
                        event=NotificationEvent.NEW_OFFER,
                        **order_data,
                    )
                    logger.info(f"[dist] Push notification queued for master#{first_mid} about order#{order.id}")
            except Exception as e:
                logger.error(f"[dist] Failed to queue notification for master#{first_mid}: {e}")


# ============================================================================
# –ò–¢–û–ì–û –ò–ó–ú–ï–ù–ï–ù–ò–ô
# ============================================================================
# 1. –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç notify_master (1 —Å—Ç—Ä–æ–∫–∞)
# 2. –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è _get_order_notification_data (50 —Å—Ç—Ä–æ–∫)
# 3. –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ notify_master –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ (13 —Å—Ç—Ä–æ–∫)
#
# –í—Å–µ–≥–æ: ~65 —Å—Ç—Ä–æ–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
