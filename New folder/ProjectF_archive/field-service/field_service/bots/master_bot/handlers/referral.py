from __future__ import annotations

from decimal import Decimal
from urllib.parse import quote

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from sqlalchemy import func, select
from sqlalchemy.ext.asyncio import AsyncSession

from field_service.bots.common import (
    MasterPaths,
    add_breadcrumbs_to_text,
    safe_answer_callback,
    safe_edit_or_send,
)
from field_service.db import models as m
from field_service.services import settings_service

from ..utils import inline_keyboard

router = Router(name='master_referral')

REFERRAL_STATUS_LABELS = {
    m.ReferralRewardStatus.ACCRUED.value: "–ù–∞—á–∏—Å–ª–µ–Ω–æ",
    m.ReferralRewardStatus.PAID.value: "–í—ã–ø–ª–∞—á–µ–Ω–æ",
    m.ReferralRewardStatus.CANCELED.value: "–û—Ç–º–µ–Ω–µ–Ω–æ",
}


@router.callback_query(F.data == 'm:rf')
async def referrals_root(callback: CallbackQuery, session: AsyncSession, master: m.masters) -> None:
    await _render_referrals(callback, session, master)
    await safe_answer_callback(callback)


@router.callback_query(F.data == 'm:kb')
async def knowledge_base(callback: CallbackQuery, session: AsyncSession, master: m.masters) -> None:
    await _render_support(callback, session)
    await safe_answer_callback(callback)


async def _render_referrals(
    event: Message | CallbackQuery,
    session: AsyncSession,
    master: m.masters,
) -> None:
    master_id = master.id
    referral_code = (master.referral_code or '').strip()
    
    # P1-7:   
    invited_total_stmt = select(func.count()).select_from(m.masters).where(
        m.masters.referred_by_master_id == master_id
    )
    invited_total = int((await session.execute(invited_total_stmt)).scalar_one() or 0)
    
    invited_pending_stmt = select(func.count()).select_from(m.masters).where(
        m.masters.referred_by_master_id == master_id,
        m.masters.verified == False,
    )
    invited_pending = int((await session.execute(invited_pending_stmt)).scalar_one() or 0)

    totals_stmt = (
        select(
            m.referral_rewards.level,
            func.count(),
            func.sum(m.referral_rewards.amount),
        )
        .where(
            m.referral_rewards.referrer_id == master_id,
            m.referral_rewards.status != m.ReferralRewardStatus.CANCELED,
        )
        .group_by(m.referral_rewards.level)
    )
    totals = (await session.execute(totals_stmt)).all()

    latest_stmt = (
        select(
            m.referral_rewards.level,
            m.referral_rewards.amount,
            m.referral_rewards.created_at,
            m.referral_rewards.status,
            m.referral_rewards.commission_id,
            m.commissions.order_id,
        )
        .join(m.commissions, m.commissions.id == m.referral_rewards.commission_id)
        .where(
            m.referral_rewards.referrer_id == master_id,
            m.referral_rewards.status != m.ReferralRewardStatus.CANCELED,
        )
        .order_by(m.referral_rewards.created_at.desc())
        .limit(5)
    )
    latest = (await session.execute(latest_stmt)).all()

    level_stats = {1: {'count': 0, 'amount': Decimal('0')}, 2: {'count': 0, 'amount': Decimal('0')}}
    for level, count, total in totals:
        try:
            level_index = int(level)
        except (TypeError, ValueError):
            continue
        bucket = level_stats.get(level_index)
        if not bucket:
            continue
        bucket['count'] = int(count or 0)
        bucket['amount'] = Decimal(total or 0)

    total_amount = level_stats[1]['amount'] + level_stats[2]['amount']
    lines: list[str] = ["<b>ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>"]
    lines.append("")
    if referral_code:
        lines.append(f"–í–∞—à –∫–æ–¥: <code>{referral_code}</code>")
    else:
        lines.append("–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
    
    # P1-7:  
    lines.append("")
    lines.append(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {invited_total}")
    if invited_pending > 0:
        lines.append(f"–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {invited_pending}")
    
    lines.append("")
    lines.append("<b>–£—Å–ª–æ–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>")
    lines.append("‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 1 (–ø—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã): 10% –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏")
    lines.append("‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 2 (—Ä–µ—Ñ–µ—Ä–∞–ª—ã —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤): 5% –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏")
    lines.append("–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    lines.append("")
    for level in (1, 2):
        bucket = level_stats[level]
        lines.append(
            f"–£—Ä–æ–≤–µ–Ω—å {level}: {bucket['count']} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ {bucket['amount']:.2f} ‚ÇΩ"
        )
    lines.append("")
    lines.append(f"–í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {total_amount:.2f} ‚ÇΩ")

    if latest:
        lines.append("")
        lines.append("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")
        for row in latest:
            level, amount, created_at, status, commission_id, order_id = row
            amount_dec = Decimal(amount or 0)
            status_key = getattr(status, 'value', status)
            status_label = REFERRAL_STATUS_LABELS.get(status_key, status_key)
            order_hint = f"–∫–æ–º #{commission_id}"
            if order_id is not None:
                order_hint += f", –∑–∞–∫–∞–∑ #{order_id}"
            lines.append(
                f"{created_at:%d.%m %H:%M} ‚Ä¢ L{int(level)} ‚Ä¢ {amount_dec:.2f} ‚ÇΩ ‚Ä¢ {status_label} ({order_hint})"
            )
    else:
        lines.append("")
        lines.append("–ù–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    # P1-7: –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
    buttons: list[list[InlineKeyboardButton]] = []
    if referral_code:
        share_text = (
            f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Field Service! "
            f"–ò—Å–ø–æ–ª—å–∑—É–π –º–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}\n\n"
            f"–ü–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞!"
        )
        encoded_share_text = quote(share_text)
        share_url = f"https://t.me/share/url?text={encoded_share_text}&url={encoded_share_text}"
        buttons.append([
        InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º", url=share_url),
        ])
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="m:menu")
    ])
    
    markup = inline_keyboard(buttons)
    text = "\n".join(lines)
    text = add_breadcrumbs_to_text(text, MasterPaths.REFERRAL)
    await safe_edit_or_send(event, text, markup)


async def _render_support(event: Message | CallbackQuery, session: AsyncSession) -> None:
    raw_values = await settings_service.get_values(["support_contact", "support_faq_url"])
    contact = (raw_values.get("support_contact", (None, None))[0] or '').strip()
    faq_url = (raw_values.get("support_faq_url", (None, None))[0] or '').strip()

    lines = ["<b>üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>"]
    lines.append(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}")
    if faq_url and faq_url != '-':
        lines.append(f"FAQ: {faq_url}")
    else:
        lines.append("FAQ: –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    markup = inline_keyboard([[
        InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="m:menu")
    ]])
    text = "\n".join(lines)
    text = add_breadcrumbs_to_text(text, MasterPaths.KNOWLEDGE)
    await safe_edit_or_send(event, text, markup)

