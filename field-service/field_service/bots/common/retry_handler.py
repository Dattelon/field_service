"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫.

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–º –ø–æ–ø—ã—Ç–æ–∫.
"""

from __future__ import annotations

import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Update

from .retry_context import (
    RetryContext,
    clear_retry_context,
    load_retry_context,
    save_retry_context,
)

__all__ = ["retry_router"]

logger = logging.getLogger(__name__)

retry_router = Router(name="retry")


@retry_router.callback_query(F.data == "retry:execute")
async def retry_execute(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.

    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫,
    –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º callback_data.

    Args:
        callback: CallbackQuery –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx = await load_retry_context(state)

    if not ctx:
        await callback.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≤—Ç–æ—Ä–∞",
            show_alert=True,
        )
        return

    if not ctx.can_retry():
        await callback.answer(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({RetryContext.MAX_ATTEMPTS})",
            show_alert=True,
        )
        await clear_retry_context(state)
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    await save_retry_context(
        state=state,
        callback_data=ctx.callback_data,
        user_id=ctx.user_id,
        chat_id=ctx.chat_id,
        message_id=ctx.message_id,
        attempt=ctx.attempt + 1,
    )

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer(
        "üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –¥–µ–π—Å—Ç–≤–∏–µ...",
        show_alert=False,
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä
    logger.info(
        f"Retrying action: {ctx.callback_data}, attempt {ctx.attempt + 1}",
        extra={
            "user_id": ctx.user_id,
            "callback_data": ctx.callback_data,
            "attempt": ctx.attempt + 1,
        },
    )

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é callback —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º callback_data
    # CallbackQuery —ç—Ç–æ frozen Pydantic –º–æ–¥–µ–ª—å, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º model_copy
    modified_callback = callback.model_copy(update={"data": ctx.callback_data})

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    # Router –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥—ë—Ç –Ω—É–∂–Ω—ã–π handler –ø–æ callback.data
    try:
        # –ü–æ–ª—É—á–∞–µ–º dispatcher –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        from aiogram import Bot

        bot: Bot = callback.bot
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: bot —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞—Ä—å –≤ aiogram 3.x, –∏—Å–ø–æ–ª—å–∑—É–µ–º workflow_data
        dp = bot.workflow_data.get("dp") if hasattr(bot, "workflow_data") else None

        if dp:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Update —Å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º callback
            update = Update(
                update_id=0,  # –ù–µ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                callback_query=modified_callback,
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ dispatcher
            await dp.feed_update(bot, update)

            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await clear_retry_context(state)
        else:
            # Fallback: –µ—Å–ª–∏ dispatcher –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
            logger.warning("Dispatcher not found in bot storage")
            await callback.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (dispatcher –Ω–µ –Ω–∞–π–¥–µ–Ω)",
                show_alert=True,
            )

    except Exception as exc:
        logger.error(
            f"Retry failed: {ctx.callback_data}",
            exc_info=exc,
        )
        # Middleware —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä


@retry_router.callback_query(F.data == "retry:cancel")
async def retry_cancel(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è.

    Args:
        callback: CallbackQuery –æ—Ç –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
        state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    await clear_retry_context(state)

    await callback.message.edit_text(
        text="‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
    )

    await callback.answer()

    logger.info(
        "Retry cancelled by user",
        extra={
            "user_id": callback.from_user.id,
        },
    )
