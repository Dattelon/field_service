from __future__ import annotations

from typing import Iterable, Sequence

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from field_service.db import models as m

from .texts import MAIN_MENU_BUTTONS
from .utils import inline_keyboard


def cancel_button(callback_data: str = "m:cancel") -> list[InlineKeyboardButton]:
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è FSM-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    return [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=callback_data)]


def start_onboarding_keyboard() -> InlineKeyboardMarkup:
    return inline_keyboard(
        [
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["start_onboarding"],
                    callback_data="m:onboarding:start",
                )
            ]
        ]
    )


def pdn_keyboard() -> InlineKeyboardMarkup:
    return inline_keyboard(
        [
            [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="m:onboarding:pdn_accept")],
            [InlineKeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="m:onboarding:pdn_decline")],
            cancel_button(),
        ]
    )


def vehicle_keyboard() -> InlineKeyboardMarkup:
    return inline_keyboard(
        [
            [InlineKeyboardButton(text="üöó –ï—Å—Ç—å –∞–≤—Ç–æ", callback_data="m:onboarding:vehicle_yes")],
            [InlineKeyboardButton(text="üö∂ –ù–µ—Ç –∞–≤—Ç–æ", callback_data="m:onboarding:vehicle_no")],
            cancel_button(),
        ]
    )


def districts_keyboard(
    *,
    options: Sequence[tuple[int, str, bool]],
    page: int,
    total_pages: int,
) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for district_id, title, selected in options:
        label = ("‚úÖ " if selected else "‚ñ´Ô∏è ") + title
        rows.append(
            [InlineKeyboardButton(text=label, callback_data=f"m:onboarding:district:{district_id}")]
        )

    controls: list[InlineKeyboardButton] = []
    if total_pages > 1:
        if page > 1:
            controls.append(
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"m:onboarding:districts_page:{page - 1}")
            )
        controls.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="m:onboarding:districts_page:noop")
        )
        if page < total_pages:
            controls.append(
                InlineKeyboardButton(text="‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data=f"m:onboarding:districts_page:{page + 1}")
            )
    controls.append(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="m:onboarding:districts_done"))
    if controls:
        rows.append(controls)
    rows.append(cancel_button())
    return inline_keyboard(rows)


def skills_keyboard(skills: Sequence[tuple[int, str, bool]]) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for skill_id, title, selected in skills:
        label = ("‚úÖ " if selected else "‚ñ´Ô∏è ") + title
        rows.append(
            [InlineKeyboardButton(text=label, callback_data=f"m:onboarding:skill:{skill_id}")]
        )
    rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="m:onboarding:skills_done")])
    rows.append(cancel_button())
    return inline_keyboard(rows)


def payout_methods_keyboard(methods: Iterable[m.PayoutMethod]) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for method in methods:
        rows.append(
            [
                InlineKeyboardButton(
                    text=_method_title(method),
                    callback_data=f"m:onboarding:payout:{method.value.lower()}",
                )
            ]
        )
    rows.append(cancel_button())
    return inline_keyboard(rows)


# –°–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –¥–ª—è –°–ë–ü —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —á–∏—Ç–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
SBP_BANKS = [
    ("sber", "–°–±–µ—Ä"),
    ("tinkoff", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ"),
    ("vtb", "–í–¢–ë"),
    ("alfa", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫"),
    ("raiff", "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω"),
    ("gpb", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫"),
    ("mts", "–ú–¢–° –ë–∞–Ω–∫"),
    ("psb", "–ü–°–ë"),
    ("open", "–û—Ç–∫—Ä—ã—Ç–∏–µ"),
    ("sovcom", "–°–æ–≤–∫–æ–º–±–∞–Ω–∫"),
    ("rsb", "–†–°–ë"),
    ("ak_bars", "–ê–∫ –ë–∞—Ä—Å"),
    ("uralsib", "–£—Ä–∞–ª—Å–∏–±"),
    ("mkb", "–ú–ö–ë"),
    ("other", "–î—Ä—É–≥–æ–µ"),
]


def sbp_bank_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –¥–ª—è –°–ë–ü."""
    rows: list[list[InlineKeyboardButton]] = []
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(SBP_BANKS), 2):
        row = []
        for j in range(2):
            idx = i + j
            if idx < len(SBP_BANKS):
                code, name = SBP_BANKS[idx]
                row.append(
                    InlineKeyboardButton(text=name, callback_data=f"m:onb:sbp_bank:{code}")
                )
        if row:
            rows.append(row)
    rows.append(cancel_button())
    return inline_keyboard(rows)


def home_geo_keyboard() -> InlineKeyboardMarkup:
    return inline_keyboard(
        [
        [InlineKeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="m:onboarding:home_geo_share")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="m:onboarding:home_geo_skip")],
        cancel_button(),
        ]
    )


def main_menu_keyboard(master: m.masters) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    if getattr(master, "verified", False):
        shift_status = getattr(master, "shift_status", m.ShiftStatus.SHIFT_OFF)
        if shift_status is m.ShiftStatus.SHIFT_OFF:
            rows.append(
                [
                    InlineKeyboardButton(
                        text=MAIN_MENU_BUTTONS["shift_on"],
                        callback_data="m:sh:on",
                    )
                ]
            )
        elif shift_status is m.ShiftStatus.SHIFT_ON:
            rows.append(
                [
                    InlineKeyboardButton(
                        text=MAIN_MENU_BUTTONS["shift_break"],
                        callback_data="m:sh:brk",
                    )
                ]
            )
            rows.append(
                [
                    InlineKeyboardButton(
                        text=MAIN_MENU_BUTTONS["shift_off"],
                        callback_data="m:sh:off",
                    )
                ]
            )
        elif shift_status is m.ShiftStatus.BREAK:
            rows.append(
                [
                    InlineKeyboardButton(
                        text=MAIN_MENU_BUTTONS["shift_break_end"],
                        callback_data="m:sh:brk:ok",
                    )
                ]
            )
            rows.append(
                [
                    InlineKeyboardButton(
                        text=MAIN_MENU_BUTTONS["shift_off"],
                        callback_data="m:sh:off",
                    )
                ]
            )
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["new_orders"],
                    callback_data="m:new",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["active_orders"],
                    callback_data="m:act",
                )
            ]
        )
        # P1-9: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["history"],
                    callback_data="m:hist",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["finance"],
                    callback_data="m:fin",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["payment_requisites"],
                    callback_data="m:req",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["referral"],
                    callback_data="m:rf",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["statistics"],
                    callback_data="m:stats",
                )
            ]
        )
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["knowledge"],
                    callback_data="m:kb",
                )
            ]
        )
    else:
        rows.append(
            [
                InlineKeyboardButton(
                    text=MAIN_MENU_BUTTONS["start_onboarding"],
                    callback_data="m:onboarding:start",
                )
            ]
        )
    return inline_keyboard(rows)


def _method_title(method: m.PayoutMethod) -> str:
    mapping = {
        m.PayoutMethod.CARD: "üí≥ –ö–∞—Ä—Ç–∞",
        m.PayoutMethod.SBP: "üì± –°–ë–ü",
        m.PayoutMethod.YOOMONEY: "üí∞ –ÆMoney",
        m.PayoutMethod.BANK_ACCOUNT: "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç",
    }
    return mapping.get(method, method.value.title())


def close_order_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞."""
    return inline_keyboard([cancel_button(callback_data="m:act:cls:cancel")])


def finance_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞."""
    return inline_keyboard([cancel_button(callback_data="m:fin:chk:cancel")])



# P1-16: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
def break_duration_keyboard(extend_mode: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞.
    
    Args:
        extend_mode: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è (–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π callback_data)
    """
    prefix = "m:sh:brk:ext:" if extend_mode else "m:sh:brk:"
    
    return inline_keyboard(
        [
            [InlineKeyboardButton(text="‚è±Ô∏è 15 –º–∏–Ω—É—Ç", callback_data=f"{prefix}15m")],
            [InlineKeyboardButton(text="‚è±Ô∏è 1 —á–∞—Å", callback_data=f"{prefix}1h")],
            [InlineKeyboardButton(text="‚è±Ô∏è 2 —á–∞—Å–∞", callback_data=f"{prefix}2h")],
            cancel_button(),
        ]
    )


# P1-16: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–µ
def break_reminder_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞."""
    return inline_keyboard(
        [
            [InlineKeyboardButton(text="‚úÖ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–º–µ–Ω—É", callback_data="m:sh:brk:ok")],
            [InlineKeyboardButton(text="‚è±Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data="m:sh:brk:extend")],
        ]
    )
