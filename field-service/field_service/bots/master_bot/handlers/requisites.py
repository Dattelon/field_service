from __future__ import annotations

import html
from typing import Any, Iterable

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton

from field_service.bots.common import safe_answer_callback, safe_edit_or_send
from field_service.db import models as m
from field_service.bots.admin_bot.services import settings as admin_settings_service
from ..utils import inline_keyboard

router = Router(name="master_requisites")

PAYMENT_METHOD_LABELS = {
    "card": "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
    "sbp": "–°–ë–ü",
    "cash": "–ù–∞–ª–∏—á–Ω—ã–µ",
}


def _format_methods(methods: Iterable[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã."""
    items: list[str] = []
    for raw in methods:
        key = str(raw).strip().lower()
        if not key:
            continue
        label = PAYMENT_METHOD_LABELS.get(key, key.upper())
        items.append(label)
    return ", ".join(items) if items else "‚Äî"


def _format_card_block(data: dict[str, Any]) -> list[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ."""
    card_number = data.get("card_number") or ""
    card_holder = data.get("card_holder") or ""
    card_bank = data.get("card_bank") or ""
    block: list[str] = []
    if card_number or card_holder or card_bank:
        block.append("<b>üí≥ –ö–∞—Ä—Ç–∞</b>")
        if card_number:
            block.append(f"üí≥ –ù–æ–º–µ—Ä: {html.escape(card_number)}")
        if card_holder:
            block.append(f"üë§ –î–µ—Ä–∂–∞—Ç–µ–ª—å: {html.escape(card_holder)}")
        if card_bank:
            block.append(f"üè¶ –ë–∞–Ω–∫: {html.escape(card_bank)}")
    return block


def _format_sbp_block(data: dict[str, Any]) -> list[str]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –°–ë–ü."""
    phone = data.get("sbp_phone") or ""
    bank = data.get("sbp_bank") or ""
    block: list[str] = []
    if phone or bank:
        block.append("<b>üì± –°–ë–ü</b>")
        if phone:
            block.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {html.escape(phone)}")
        if bank:
            block.append(f"üè¶ –ë–∞–Ω–∫: {html.escape(bank)}")
    return block


def _format_requisites_text(snapshot: dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É."""
    methods = _format_methods(snapshot.get("methods") or [])
    lines: list[str] = [
        "<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>",
        "",
        f"<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b> {methods}",
    ]

    card_block = _format_card_block(snapshot)
    sbp_block = _format_sbp_block(snapshot)
    other_text = snapshot.get("other_text") or ""
    comment_template = snapshot.get("comment_template") or ""

    if card_block:
        lines.append("")
        lines.extend(card_block)
    if sbp_block:
        lines.append("")
        lines.extend(sbp_block)
    if other_text:
        lines.append("")
        lines.append("<b>üìù –ü—Ä–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ</b>")
        lines.append(html.escape(other_text))
    if comment_template:
        lines.append("")
        lines.append("<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</b>")
        lines.append(html.escape(comment_template))

    lines.append("")
    lines.append("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    return "\n".join(lines)


@router.callback_query(F.data == "m:req")
async def show_payment_requisites(
    callback: CallbackQuery,
    master: m.masters,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –º–∞—Å—Ç–µ—Ä—É."""
    if not callback.message:
        await safe_answer_callback(callback)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
    try:
        settings_service = admin_settings_service.DBSettingsService()
        snapshot = await settings_service.get_owner_pay_snapshot()
    except Exception as e:
        await safe_answer_callback(callback, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = _format_requisites_text(snapshot)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard = inline_keyboard(
        [
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="m:menu")],
        ]
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ QR-–∫–æ–¥–∞ –°–ë–ü
    qr_file_id = snapshot.get("sbp_qr_file_id") or ""

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å QR-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        if qr_file_id:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except Exception:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            await callback.message.answer_photo(
                photo=qr_file_id,
                caption=text,
                reply_markup=keyboard,
            )
        else:
            # –ï—Å–ª–∏ QR-–∫–æ–¥–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await safe_edit_or_send(callback.message, text, keyboard)
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ QR
        await safe_edit_or_send(callback.message, text, keyboard)

    await safe_answer_callback(callback)
