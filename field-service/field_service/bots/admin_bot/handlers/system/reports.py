# field_service/bots/admin_bot/handlers/reports.py
"""üìä –ú–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á—ë—Ç–æ–≤ (ReportsExportFSM).

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º, –∫–æ–º–∏—Å—Å–∏—è–º –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º
–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö CSV –∏ XLSX.
"""
from __future__ import annotations

from datetime import date, datetime, timedelta
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Any, Optional

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, Message

from field_service.config import settings as env_settings
from field_service.services import export_service, time_service

from ...core.dto import StaffRole, StaffUser
from ...core.filters import StaffRoleFilter
from ...ui.keyboards import reports_menu_keyboard, reports_periods_keyboard
from ...core.states import ReportsExportFSM
from ...core.access import visible_city_ids_for
from ..common.helpers import _settings_service


router = Router(name="admin_reports")


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤: (—Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è caption)
REPORT_DEFINITIONS: dict[str, tuple[str, Any, str]] = {
    "orders": ("–∑–∞–∫–∞–∑—ã", export_service.export_orders, "–ó–∞–∫–∞–∑—ã"),
    "commissions": ("–∫–æ–º–∏—Å—Å–∏–∏", export_service.export_commissions, "–ö–æ–º–∏—Å—Å–∏–∏"),
    "ref_rewards": ("—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", export_service.export_referral_rewards, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"),
}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç: ISO (YYYY-MM-DD) –∏ —Ä—É—Å—Å–∫–∏–π (DD.MM.YYYY)
DATE_INPUT_FORMATS = ("%Y-%m-%d", "%d.%m.%Y")


# ============================================
# üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ============================================

def _parse_period_input(text: str) -> Optional[tuple[date, date]]:
    """üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–∏–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.
    
    –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - "YYYY-MM-DD YYYY-MM-DD" (ISO)
    - "DD.MM.YYYY DD.MM.YYYY" (—Ä—É—Å—Å–∫–∏–π)
    
    Returns:
        (start_date, end_date) –∏–ª–∏ None –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω
    """
    if not text:
        return None
    
    parts = text.strip().split()
    if len(parts) != 2:
        return None
    
    start_str, end_str = parts
    
    for fmt in DATE_INPUT_FORMATS:
        try:
            start_dt = datetime.strptime(start_str, fmt).date()
            end_dt = datetime.strptime(end_str, fmt).date()
            if start_dt <= end_dt:
                return start_dt, end_dt
        except ValueError:
            continue
    
    return None


def _compute_quick_period(key: str, *, tz: str) -> Optional[tuple[date, date]]:
    """‚è±Ô∏è –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
    
    Args:
        key: –ö–ª—é—á –ø–µ—Ä–∏–æ–¥–∞ (today, yesterday, last7, this_month, prev_month)
        tz: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    
    Returns:
        (start_date, end_date) –∏–ª–∏ None
    """
    now = time_service.now_in_city(tz)
    today = now.date()
    
    if key == "today":
        return today, today
    
    if key == "yesterday":
        y = today - timedelta(days=1)
        return y, y
    
    if key == "last7":
        return today - timedelta(days=6), today
    
    if key == "this_month":
        start = today.replace(day=1)
        return start, today
    
    if key == "prev_month":
        first_this = today.replace(day=1)
        prev_last = first_this - timedelta(days=1)
        start = prev_last.replace(day=1)
        end = prev_last
        return start, end
    
    return None


def _format_period_label(start_dt: date, end_dt: date) -> str:
    """üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        start_dt: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
        end_dt: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "01.01.2025 - 31.01.2025" –∏–ª–∏ "01.01.2025" –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è
    """
    if start_dt == end_dt:
        return start_dt.strftime("%d.%m.%Y")
    return f"{start_dt.strftime('%d.%m.%Y')} - {end_dt.strftime('%d.%m.%Y')}"


async def _send_export_documents(
    bot,
    bundle: export_service.ExportBundle,
    caption: str,
    *,
    chat_id: int,
) -> None:
    """üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á—ë—Ç–∞ (CSV –∏ XLSX).
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bundle: ExportBundle —Å –¥–∞–Ω–Ω—ã–º–∏ CSV –∏ XLSX
        caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª–∞–º
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    documents = [
        (bundle.csv_bytes, bundle.csv_filename, f"{caption} - CSV"),
        (bundle.xlsx_bytes, bundle.xlsx_filename, f"{caption} - XLSX"),
    ]
    
    with TemporaryDirectory() as tmpdir:
        base_path = Path(tmpdir)
        for payload, filename, note in documents:
            file_path = base_path / filename
            file_path.write_bytes(payload)
            await bot.send_document(
                chat_id=chat_id,
                document=FSInputFile(file_path),
                caption=note,
            )


# ============================================
# üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ============================================

@router.callback_query(
    F.data == "adm:r",
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN}),
)
async def cb_reports(cq: CallbackQuery, staff: StaffUser, state: FSMContext) -> None:
    """<b>üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    await state.clear()
    await cq.message.edit_text(
        "<b>üìä –û—Ç—á—ë—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=reports_menu_keyboard()
    )
    await cq.answer()


async def _prompt_report_period(cq: CallbackQuery, state: FSMContext, report_kind: str) -> None:
    """üïí –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞.
    
    Args:
        cq: CallbackQuery
        state: FSMContext
        report_kind: –¢–∏–ø –æ—Ç—á—ë—Ç–∞ (orders, commissions, ref_rewards)
    """
    await state.clear()
    label, _, _ = REPORT_DEFINITIONS[report_kind]
    await state.set_state(ReportsExportFSM.awaiting_period)
    await state.update_data(report_kind=report_kind)
    await cq.message.answer(
        f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</b>\n\n"
        f"–û—Ç—á—ë—Ç: <i>{label}</i>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=reports_periods_keyboard(),
    )
    await cq.answer()


@router.callback_query(
    F.data == "adm:r:o",
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN}),
)
async def cb_reports_orders(cq: CallbackQuery, state: FSMContext) -> None:
    """üìã –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV/XLSX —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–∞–∑–∞—Ö."""
    await _prompt_report_period(cq, state, "orders")


@router.callback_query(
    F.data == "adm:r:c",
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN}),
)
async def cb_reports_commissions(cq: CallbackQuery, state: FSMContext) -> None:
    """üí≥ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –ø–æ –∫–æ–º–∏—Å—Å–∏—è–º.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV/XLSX —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö."""
    await _prompt_report_period(cq, state, "commissions")


@router.callback_query(
    F.data == "adm:r:rr",
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN}),
)
async def cb_reports_referrals(cq: CallbackQuery, state: FSMContext) -> None:
    """ü§ù –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV/XLSX —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö."""
    await _prompt_report_period(cq, state, "ref_rewards")


@router.message(StateFilter(ReportsExportFSM.awaiting_period), F.text == "/cancel")
async def reports_cancel(msg: Message, state: FSMContext) -> None:
    """‚ùå –û—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á—ë—Ç–∞.
    
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∫–æ–º–∞–Ω–¥–æ–π /cancel."""
    await state.clear()
    await msg.answer("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω.")


@router.message(StateFilter(ReportsExportFSM.awaiting_period))
async def reports_period_submit(
    msg: Message,
    staff: StaffUser | None,
    state: FSMContext,
) -> None:
    """üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞.
    
    –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - "YYYY-MM-DD YYYY-MM-DD" (ISO)
    - "DD.MM.YYYY DD.MM.YYYY" (—Ä—É—Å—Å–∫–∏–π)
    """
    period = _parse_period_input(msg.text or "")
    if not period:
        await msg.answer(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>YYYY-MM-DD YYYY-MM-DD</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>2025-01-01 2025-01-31</code>\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞.",
            reply_markup=reports_periods_keyboard(),
        )
        return

    start_dt, end_dt = period
    data = await state.get_data()
    report_kind = data.get("report_kind")
    definition = REPORT_DEFINITIONS.get(report_kind or "")
    if not definition:
        await state.clear()
        await msg.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=reports_menu_keyboard(),
        )
        return

    label, exporter, caption_prefix = definition
    
    # RBAC:   
    city_ids = visible_city_ids_for(staff) if isinstance(staff, StaffUser) else None

    # P0-8: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    await msg.answer("üîÑ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞</b>\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

    try:
        bundle = await exporter(date_from=start_dt, date_to=end_dt, city_ids=city_ids)
    except Exception as exc:
        await state.clear()
        await msg.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {exc}",
            reply_markup=reports_menu_keyboard(),
        )
        return

    period_label = _format_period_label(start_dt, end_dt)
    
    operator_chat_id = None
    if msg.chat:
        operator_chat_id = msg.chat.id
    elif msg.from_user:
        operator_chat_id = msg.from_user.id
    
    configured_chat_id: Optional[int] = None
    try:
        settings_service = _settings_service(msg.bot)
        raw_channel_id = await settings_service.get_value("reports_channel_id")
    except Exception:
        raw_channel_id = None
    
    if raw_channel_id:
        candidate = raw_channel_id.strip()
        if candidate and candidate != "-":
            try:
                configured_chat_id = int(candidate)
            except ValueError:
                configured_chat_id = None
    
    target_chat_id = configured_chat_id or env_settings.reports_channel_id or operator_chat_id
    if target_chat_id is None:
        await state.clear()
        await msg.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
            "–ù–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=reports_menu_keyboard(),
        )
        return

    try:
        await _send_export_documents(
            msg.bot,
            bundle,
            f"{caption_prefix} {period_label}",
            chat_id=target_chat_id,
        )
    except TelegramBadRequest:
        #       -  
        if operator_chat_id is not None and target_chat_id != operator_chat_id:
            await _send_export_documents(
                msg.bot,
                bundle,
                f"{caption_prefix} {period_label}",
                chat_id=operator_chat_id,
            )
            await msg.answer(
                "‚ÑπÔ∏è <b>–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.\n"
                "–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –Ω–∞–ø—Ä—è–º—É—é."
            )
        else:
            await state.clear()
            await msg.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
    else:
        await msg.answer("‚úÖ <b>–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω</b>\n\n–§–∞–π–ª—ã CSV –∏ XLSX –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    
    await state.clear()


@router.callback_query(F.data.regexp(r"^adm:r:pd:(today|yesterday|last7|this_month|prev_month|custom)$"))
async def reports_quick_period_choice(
    cq: CallbackQuery,
    state: FSMContext,
    staff: StaffUser | None = None,
) -> None:
    """‚è±Ô∏è –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞.
    
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:
    - today: –°–µ–≥–æ–¥–Ω—è
    - yesterday: –í—á–µ—Ä–∞
    - last7: –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    - this_month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    - prev_month: –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    - custom: –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
    """
    key = (cq.data or "").rsplit(":", 1)[-1]
    data = await state.get_data()
    report_kind = data.get("report_kind")
    definition = REPORT_DEFINITIONS.get(report_kind or "")
    if not definition:
        await state.clear()
        if cq.message:
            await cq.message.edit_text(
                "<b>üìä –û—Ç—á—ë—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
                reply_markup=reports_menu_keyboard()
            )
        await cq.answer()
        return
    
    if key == "custom":
        if cq.message:
            await cq.message.answer(
                "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</b>\n\n"
                "–§–æ—Ä–º–∞—Ç: <code>YYYY-MM-DD YYYY-MM-DD</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>2025-01-01 2025-01-31</code>\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel"
            )
        await cq.answer()
        return
    
    period = _compute_quick_period(key, tz=env_settings.timezone)
    if not period:
        await cq.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥", show_alert=True)
        return
    
    start_dt, end_dt = period
    label, exporter, caption_prefix = definition
    
    # RBAC:   
    city_ids = visible_city_ids_for(staff) if isinstance(staff, StaffUser) else None
    
    # P0-8: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ callback query
    await cq.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç...", show_alert=False)
    if cq.message:
        await cq.message.answer("üîÑ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞</b>\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        bundle = await exporter(date_from=start_dt, date_to=end_dt, city_ids=city_ids)
    except Exception as exc:
        if cq.message:
            await cq.message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n{exc}",
                reply_markup=reports_menu_keyboard(),
            )
        await cq.answer()
        return
    
    period_label = _format_period_label(start_dt, end_dt)
    
    target_chat_id = env_settings.reports_channel_id or (cq.message.chat.id if cq.message else None)
    if target_chat_id is None and cq.from_user:
        target_chat_id = cq.from_user.id
    if target_chat_id is None:
        if cq.message:
            await cq.message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n"
                "–ù–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤.",
                reply_markup=reports_menu_keyboard()
            )
        await cq.answer()
        return
    
    try:
        await _send_export_documents(
            cq.bot,
            bundle,
            f"{caption_prefix} {period_label}",
            chat_id=target_chat_id,
        )
    except TelegramBadRequest:
        # Fallback   
        if cq.from_user:
            await _send_export_documents(
                cq.bot,
                bundle,
                f"{caption_prefix} {period_label}",
                chat_id=cq.from_user.id,
            )
            if cq.message:
                await cq.message.answer(
                    "‚ÑπÔ∏è <b>–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."
                )
        else:
            if cq.message:
                await cq.message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç."
                )
            await cq.answer()
            return
    else:
        if cq.message:
            await cq.message.answer(
                "‚úÖ <b>–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                "–§–∞–π–ª—ã CSV –∏ XLSX –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
            )
    
    await state.clear()
    # P0-8: cq.answer()        


__all__ = [
    "router",
    "REPORT_DEFINITIONS",
]
