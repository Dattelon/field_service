# field_service/bots/admin_bot/handlers/orders.py
"""–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (NewOrderFSM)."""
from __future__ import annotations

import logging
import os
from datetime import time
from typing import Optional
from zoneinfo import ZoneInfo

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from field_service.config import settings as env_settings
from field_service.db.models import OrderStatus, OrderType
from field_service.services import time_service

from ...core.dto import StaffRole, StaffUser
from ...core.filters import StaffRoleFilter
from ...ui.keyboards import (
    assign_menu_keyboard,
    new_order_asap_late_keyboard,
    new_order_attachments_keyboard,
    new_order_city_keyboard,
    new_order_confirm_keyboard,
    new_order_district_keyboard,
    new_order_slot_keyboard,
    new_order_street_keyboard,
    new_order_street_manual_keyboard,
    new_order_street_mode_keyboard,
    order_card_keyboard,
)
from ...ui.texts.common import BTN_CONFIRM, BTN_CANCEL
from ...utils.normalizers import normalize_category
from .queue import CATEGORY_CHOICES, CATEGORY_LABELS, CATEGORY_LABELS_BY_VALUE
from ...core.states import NewOrderFSM
from ...ui.texts import new_order_summary
from ...core.access import visible_city_ids_for
from ..common.helpers import (
    ATTACHMENTS_LIMIT,
    _attachments_from_state,
    _build_new_order_data,
    _orders_service,
    _resolve_city_timezone,
    _validate_name,
    _validate_phone,
    _normalize_phone,
    _zone_storage_value,
)


logger = logging.getLogger(__name__)
router = Router(name="admin_orders")


WORKDAY_START_DEFAULT = time_service.parse_time_string(env_settings.workday_start, default=time(10, 0))
WORKDAY_END_DEFAULT = time_service.parse_time_string(env_settings.workday_end, default=time(20, 0))
LATE_ASAP_THRESHOLD = time_service.parse_time_string(env_settings.asap_late_threshold, default=time(19, 30))


async def is_working_hours(city_id: int, orders_service) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ —Å —É—á–µ—Ç–æ–º timezone –≥–æ—Ä–æ–¥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î."""
    if os.getenv("PYTEST_CURRENT_TEST"):
        return True
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏ –µ–≥–æ timezone
    city = await orders_service.get_city(city_id)
    if not city or not city.tz:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞
    from datetime import datetime
    tz = ZoneInfo(city.tz)
    now_local = datetime.now(tz)
    current_time = now_local.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    workday_start, workday_end = await _resolve_workday_window()
    
    return workday_start <= current_time <= workday_end

SLOT_BUCKETS: tuple[tuple[str, time, time], ...] = tuple(
    (bucket, span[0], span[1]) for bucket, span in time_service._SLOT_BUCKETS.items()
)


def _slot_options(now_local, *, workday_start, workday_end):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π —Å–ª–æ—Ç–æ–≤."""
    current = now_local.timetz()
    if current.tzinfo is not None:
        current = current.replace(tzinfo=None)
    options = []
    if current < workday_end:
        options.append(("ASAP", "ASAP"))
        for bucket_key, start, end in SLOT_BUCKETS:
            if current < start:
                options.append((f"TODAY:{bucket_key}", f" {start:%H:%M}-{end:%H:%M}"))
    for bucket_key, start, end in SLOT_BUCKETS:
        options.append((f"TOM:{bucket_key}", f" {start:%H:%M}-{end:%H:%M}"))
    return options


def _format_slot_display(choice, computation, *, tz):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ—Ç–∞."""
    if choice == "ASAP":
        return "ASAP"
    formatted = time_service.format_timeslot_local(
        computation.start_utc,
        computation.end_utc,
        tz=tz,
    )
    return formatted or ""


async def _resolve_workday_window():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∫–Ω–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        from field_service.services import settings_service
        return await settings_service.get_working_window()
    except Exception:
        return WORKDAY_START_DEFAULT, WORKDAY_END_DEFAULT


async def _finalize_slot_selection(
    message,
    state,
    *,
    slot_choice,
    tz,
    workday_start,
    workday_end,
    initial_status_override=None,
):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞."""
    computation = time_service.compute_slot(
        city_tz=tz,
        choice=slot_choice,
        workday_start=workday_start,
        workday_end=workday_end,
    )
    slot_display = _format_slot_display(slot_choice, computation, tz=tz)

    await state.update_data(
        timeslot_display=slot_display,
        timeslot_start_utc=computation.start_utc,
        timeslot_end_utc=computation.end_utc,
        initial_status=initial_status_override,
        pending_asap=False,
    )
    summary = new_order_summary(await state.get_data())
    await state.set_state(NewOrderFSM.confirm)
    await message.edit_text(
        summary,
        reply_markup=new_order_confirm_keyboard(),
        disable_web_page_preview=True,
    )


async def _render_created_order_card(message, order_id, staff):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    orders_service = _orders_service(message.bot)
    detail = await orders_service.get_card(order_id, city_ids=visible_city_ids_for(staff))
    if not detail:
        await message.answer(f"–ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    from ...ui.texts import format_order_card
    text = format_order_card(detail)
    markup = order_card_keyboard(
        detail.id,
        attachments=detail.attachments,
        allow_return=(detail.status.upper() not in {"CANCELED", "CLOSED"}),
        allow_cancel=(detail.status.upper() not in {"CANCELED", "CLOSED"}),
        show_guarantee=False,
    )
    try:
        await message.edit_text(text, reply_markup=markup)
    except Exception:
        await message.answer(text, reply_markup=markup)


# ============================================
#   - 
# ============================================

async def _start_new_order(cq, staff, state):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏."""
    await state.clear()
    await state.update_data(staff_id=staff.id, attachments=[], order_type=OrderType.NORMAL.value)
    await state.set_state(NewOrderFSM.city)
    await _render_city_step(cq.message, state, page=1, staff=staff)
    await cq.answer()


async def _render_city_step(message, state, page, staff, query=None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å —É—á—ë—Ç–æ–º visible_city_ids."""
    orders_service = _orders_service(message.bot)
    # RBAC:     CITY_ADMIN
    city_ids = visible_city_ids_for(staff)
    limit = 80
    if query:
        cities = await orders_service.list_cities(query=query, limit=limit, city_ids=city_ids)
    else:
        cities = await orders_service.list_cities(limit=limit, city_ids=city_ids)
    if not cities:
        try:
            await message.edit_text("üèô –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è.")
        except TelegramBadRequest:
            await message.answer("üèô –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è.")
        return
    per_page = 10
    total_pages = max(1, (len(cities) + per_page - 1) // per_page)
    page = max(1, min(page, total_pages))
    start = (page - 1) * per_page
    chunk = cities[start : start + per_page]
    keyboard = new_order_city_keyboard([(c.id, c.name) for c in chunk], page=page, total_pages=total_pages)
    prompt = "üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:"
    try:
        await message.edit_text(prompt, reply_markup=keyboard)
    except TelegramBadRequest:
        await message.answer(prompt, reply_markup=keyboard)
    except Exception:
        await message.answer(prompt, reply_markup=keyboard)
    await state.update_data(city_query=query, city_page=page)


@router.callback_query(
    F.data == "adm:new",
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_start(cq: CallbackQuery, staff: StaffUser, state: FSMContext) -> None:
    """–°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (P0-5)."""
    await state.clear()
    from ...ui.keyboards import create_order_mode_keyboard
    await cq.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è:\n\n"
        "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–π</b> - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (5 —à–∞–≥–æ–≤)\n"
        "üìã <b>–ü–æ–ª–Ω—ã–π</b> - –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏",
        reply_markup=create_order_mode_keyboard(),
    )
    await cq.answer()


@router.callback_query(
    F.data == "adm:new:mode:full",
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_full_mode(cq: CallbackQuery, staff: StaffUser, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è."""
    await _start_new_order(cq, staff, state)



@router.message(
    Command("cancel"),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def admin_cancel_command(message: Message, staff: StaffUser, state: FSMContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM."""
    await state.clear()
    from ...ui.keyboards import main_menu
    await message.answer("‚Ü©Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(staff))


@router.callback_query(
    F.data == "adm:new:cancel",
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_cancel(cq: CallbackQuery, staff: StaffUser, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    await state.clear()
    if cq.message:
        from ...ui.keyboards import main_menu
        try:
            await cq.message.edit_text("‚Ü©Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(staff))
        except TelegramBadRequest:
            await cq.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu(staff))
    try:
        await cq.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except TelegramBadRequest:
        pass


@router.callback_query(
    F.data.startswith("adm:new:city_page:"),
    StateFilter(NewOrderFSM.city),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_city_page(cq: CallbackQuery, staff: StaffUser, state: FSMContext) -> None:
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤."""
    page = int(cq.data.split(":")[3])
    data = await state.get_data()
    query = data.get("city_query")
    await state.set_state(NewOrderFSM.city)
    await _render_city_step(cq.message, state, page=page, staff=staff, query=query)
    await cq.answer()


@router.callback_query(
    F.data == "adm:new:city_search",
    StateFilter(NewOrderFSM.city),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_city_search(cq: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞."""
    await state.set_state(NewOrderFSM.city)
    prompt = "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    try:
        await cq.message.edit_text(prompt)
    except TelegramBadRequest:
        await cq.message.answer(prompt)
    except Exception:
        await cq.message.answer(prompt)
    await cq.answer()


@router.message(
    StateFilter(NewOrderFSM.city),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_city_input(msg: Message, staff: StaffUser, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º (–ø–æ–∏—Å–∫)."""
    query = (msg.text or "").strip()
    if len(query) < 2:
        await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await _render_city_step(msg, state, page=1, staff=staff, query=query)


@router.callback_query(
    F.data.startswith("adm:new:city:"),
    StateFilter(NewOrderFSM.city),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_city_pick(cq: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    city_id = int(cq.data.split(":")[3])
    orders_service = _orders_service(cq.message.bot)
    city = await orders_service.get_city(city_id)
    if not city:
        await cq.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ", show_alert=True)
        return
    await state.update_data(city_id=city.id, city_name=city.name)
    await state.set_state(NewOrderFSM.district)
    await _render_district_step(cq.message, state, page=1)
    await cq.answer()


# ============================================
#   - 
# ============================================

async def _render_district_step(message, state, page):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    data = await state.get_data()
    city_id = data.get("city_id")
    orders_service = _orders_service(message.bot)
    districts, has_next = await orders_service.list_districts(city_id, page=page, page_size=5)
    buttons = [(d.id, d.name) for d in districts]
    keyboard = new_order_district_keyboard(buttons, page=page, has_next=has_next)
    prompt = "üó∫ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:"
    try:
        await message.edit_text(prompt, reply_markup=keyboard)
    except TelegramBadRequest:
        await message.answer(prompt, reply_markup=keyboard)
    except Exception:
        await message.answer(prompt, reply_markup=keyboard)
    await state.update_data(district_page=page)


@router.callback_query(
    F.data.startswith("adm:new:district_page:"),
    StateFilter(NewOrderFSM.district),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_district_page(cq: CallbackQuery, state: FSMContext) -> None:
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–π–æ–Ω–æ–≤."""
    page = int(cq.data.split(":")[3])
    await state.set_state(NewOrderFSM.district)
    await _render_district_step(cq.message, state, page=page)
    try:
        await cq.answer()
    except TelegramBadRequest:
        pass


@router.callback_query(
    F.data == "adm:new:city_back",
    StateFilter(NewOrderFSM.district),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_city_back(cq: CallbackQuery, staff: StaffUser, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    data = await state.get_data()
    await state.set_state(NewOrderFSM.city)
    await _render_city_step(
        cq.message,
        state,
        page=data.get("city_page", 1),
        staff=staff,
        query=data.get("city_query"),
    )
    await cq.answer()


@router.callback_query(
    F.data == "adm:new:district:none",
    StateFilter(NewOrderFSM.district),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_district_none(cq: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞ (–∞–¥—Ä–µ—Å –±–µ–∑ —Ä–∞–π–æ–Ω–∞)."""
    await state.update_data(district_id=None, district_name="")
    await state.set_state(NewOrderFSM.street_mode)
    await cq.message.edit_text(
        "üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —É–ª–∏—Ü—ã:",
        reply_markup=new_order_street_mode_keyboard(),
    )
    await cq.answer()


@router.callback_query(
    F.data.startswith("adm:new:district:"),
    StateFilter(NewOrderFSM.district),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_district_pick(cq: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    district_id = int(cq.data.split(":")[3])
    orders_service = _orders_service(cq.message.bot)
    district = await orders_service.get_district(district_id)
    if not district:
        await cq.answer("–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await state.update_data(district_id=district.id, district_name=district.name)
    await state.set_state(NewOrderFSM.street_mode)
    await cq.message.edit_text(
        "üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —É–ª–∏—Ü—ã:",
        reply_markup=new_order_street_mode_keyboard(),
    )
    await cq.answer()


# ============================================
#   - 
# ============================================

@router.callback_query(
    F.data == "adm:new:street:search",
    StateFilter(NewOrderFSM.street_mode),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_street_search(cq: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ —É–ª–∏—Ü—ã –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ."""
    await state.set_state(NewOrderFSM.street_search)
    await cq.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞) –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ.")
    await cq.answer()


@router.callback_query(
    F.data == "adm:new:street:manual",
    StateFilter(NewOrderFSM.street_mode),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_street_manual(cq: CallbackQuery, state: FSMContext) -> None:
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã."""
    await state.set_state(NewOrderFSM.street_manual)
    await cq.message.edit_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é (–æ—Ç 2 –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤).",
        reply_markup=new_order_street_manual_keyboard(),
    )
    await cq.answer()


@router.callback_query(
    F.data == "adm:new:street:none",
    StateFilter(NewOrderFSM.street_mode),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_street_none(cq: CallbackQuery, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ —É–ª–∏—Ü—ã (–∞–¥—Ä–µ—Å –±–µ–∑ —É–ª–∏—Ü—ã)."""
    await state.update_data(street_id=None, street_name="", street_manual=None)
    await state.set_state(NewOrderFSM.house)
    await cq.message.edit_text("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–æ—Ç 1 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤, '-' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω).")
    await cq.answer()


@router.callback_query(
    F.data == "adm:new:district_back",
    StateFilter(NewOrderFSM.street_mode),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_street_back(cq: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞."""
    await state.set_state(NewOrderFSM.district)
    page = (await state.get_data()).get("district_page", 1)
    await _render_district_step(cq.message, state, page=page)
    await cq.answer()


@router.message(
    StateFilter(NewOrderFSM.street_manual),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_street_manual_input(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü—ã."""
    value = (msg.text or "").strip()
    if not (2 <= len(value) <= 250):
        await msg.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(street_id=None, street_name=value, street_manual=value)
    await state.set_state(NewOrderFSM.house)
    await msg.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–æ—Ç 1 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤, '-' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω).")


@router.message(
    StateFilter(NewOrderFSM.street_search),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_street_search_input(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —É–ª–∏—Ü–µ."""
    query = (msg.text or "").strip()
    if len(query) < 2:
        await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ª–∏—Ü—ã.")
        return
    data = await state.get_data()
    city_id = data.get("city_id")
    orders_service = _orders_service(msg.bot)
    streets = await orders_service.search_streets(city_id, query)
    if not streets:
        await msg.answer("üîç –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.")
        await state.set_state(NewOrderFSM.street_mode)
        await msg.answer(
            "üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —É–ª–∏—Ü—ã:",
            reply_markup=new_order_street_mode_keyboard(),
        )
        return
    buttons = [
        (s.id, s.name if s.score is None else f"{s.name} ({int(s.score)}%)")
        for s in streets
    ]
    await msg.answer(
        "üè† –í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:",
        reply_markup=new_order_street_keyboard(buttons),
    )
    await state.set_state(NewOrderFSM.street_mode)
    await state.update_data(street_search_results=buttons)


@router.callback_query(
    F.data.startswith("adm:new:street:"),
    StateFilter(NewOrderFSM.street_mode),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_street_pick(cq: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä —É–ª–∏—Ü—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è."""
    tail = cq.data.split(":")[3]
    if tail == "search_again":
        await state.set_state(NewOrderFSM.street_search)
        await cq.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ª–∏—Ü—ã.")
        await cq.answer()
        return
    if tail == "manual_back":
        await state.set_state(NewOrderFSM.street_mode)
        await cq.message.edit_text(
            "üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —É–ª–∏—Ü—ã:",
            reply_markup=new_order_street_mode_keyboard(),
        )
        await cq.answer()
        return
    if tail == "back":
        await state.set_state(NewOrderFSM.street_mode)
        await cq.message.edit_text(
            "üè† –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —É–ª–∏—Ü—ã:",
            reply_markup=new_order_street_mode_keyboard(),
        )
        await cq.answer()
        return
    street_id = int(tail)
    orders_service = _orders_service(cq.message.bot)
    street = await orders_service.get_street(street_id)
    if not street:
        await cq.answer("–£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await state.update_data(street_id=street.id, street_name=street.name, street_manual=None)
    await state.set_state(NewOrderFSM.house)
    await cq.message.edit_text("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–æ—Ç 1 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤, '-' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω).")
    await cq.answer()


# ============================================
#   - 
# ============================================

@router.message(
    StateFilter(NewOrderFSM.house),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_house(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞."""
    value = (msg.text or "").strip()
    if not (1 <= len(value) <= 10):
        await msg.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –¥–æ–º–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(house=value)
    await state.set_state(NewOrderFSM.apartment)
    await msg.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã / –æ—Ñ–∏—Å–∞ (–¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤, '-' –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")


@router.message(
    StateFilter(NewOrderFSM.apartment),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_apartment(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã/–æ—Ñ–∏—Å–∞."""
    value = (msg.text or "").strip()
    if value == "-":
        value = ""
    if len(value) > 10:
        await msg.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã/–æ—Ñ–∏—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(apartment=value or None)
    await state.set_state(NewOrderFSM.address_comment)
    await msg.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É (–¥–æ 250 —Å–∏–º–≤–æ–ª–æ–≤, '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å).")


@router.message(
    StateFilter(NewOrderFSM.address_comment),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_address_comment(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∞–¥—Ä–µ—Å—É."""
    value = (msg.text or "").strip()
    if value == "-":
        value = ""
    await state.update_data(address_comment=value or None)
    await state.set_state(NewOrderFSM.client_name)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–§–∞–º–∏–ª–∏—è –ò.–û.)")


# ============================================
#   - 
# ============================================

@router.message(
    StateFilter(NewOrderFSM.client_name),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_client_name(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    value = (msg.text or "").strip()
    if not _validate_name(value):
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–§–∞–º–∏–ª–∏—è –ò.–û.)")
        return
    await state.update_data(client_name=value)
    await state.set_state(NewOrderFSM.client_phone)
    await msg.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")


@router.message(
    StateFilter(NewOrderFSM.client_phone),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_client_phone(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞."""
    raw = _normalize_phone(msg.text)
    if not _validate_phone(raw):
        await msg.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX.")
        return
    await state.update_data(client_phone=raw)
    await state.set_state(NewOrderFSM.category)
    
    kb = InlineKeyboardBuilder()
    for category, label in CATEGORY_CHOICES:
        kb.button(text=label, callback_data=f"adm:new:cat:{category.value}")
    kb.adjust(2)
    await msg.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:", reply_markup=kb.as_markup())


@router.callback_query(
    F.data.startswith("adm:new:cat:"),
    StateFilter(NewOrderFSM.category),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_category(cq: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥–∏."""
    raw = cq.data.split(":")[3]
    category = normalize_category(raw)
    if category is None:
        await cq.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥–∏", show_alert=True)
        return
    await state.update_data(
        category=category,
        category_label=CATEGORY_LABELS.get(category, CATEGORY_LABELS_BY_VALUE.get(raw, raw)),
    )
    await state.set_state(NewOrderFSM.description)
    await cq.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤).")
    await cq.answer()


@router.message(
    StateFilter(NewOrderFSM.description),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_description(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."""
    text_value = (msg.text or "").strip()
    if not (10 <= len(text_value) <= 500):
        await msg.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(description=text_value)
    await state.set_state(NewOrderFSM.attachments)
    await msg.answer(
        'üìé –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ù–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.',
        reply_markup=new_order_attachments_keyboard(False),
    )


# ============================================
#   - 
# ============================================

@router.callback_query(
    F.data == "adm:new:att:add",
    StateFilter(NewOrderFSM.attachments),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_att_add(cq: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è."""
    await state.set_state(NewOrderFSM.attachments)
    await cq.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è")


@router.callback_query(
    F.data == "adm:new:att:clear",
    StateFilter(NewOrderFSM.attachments),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_att_clear(cq: CallbackQuery, state: FSMContext) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π."""
    data = await state.get_data()
    data["attachments"] = []
    await state.update_data(**data)
    await state.set_state(NewOrderFSM.attachments)
    await cq.message.edit_text(
        'üìé –í–ª–æ–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "–ì–æ—Ç–æ–≤–æ".',
        reply_markup=new_order_attachments_keyboard(False),
    )
    await cq.answer()


@router.message(
    StateFilter(NewOrderFSM.attachments),
    F.photo,
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_attach_photo(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–ª–æ–∂–µ–Ω–∏—è."""
    attachments = _attachments_from_state(await state.get_data())
    if len(attachments) >= ATTACHMENTS_LIMIT:
        await msg.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–ª–æ–∂–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤)")
        return
    photo = msg.photo[-1]
    attachments.append(
        {
            "file_id": photo.file_id,
            "file_unique_id": photo.file_unique_id,
            "file_type": "photo",
            "file_name": None,
            "mime_type": None,
            "caption": msg.caption,
        }
    )
    await state.update_data(attachments=attachments)
    await msg.answer(
        f'‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(attachments)}. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "–ì–æ—Ç–æ–≤–æ".',
        reply_markup=new_order_attachments_keyboard(True),
    )


@router.message(
    StateFilter(NewOrderFSM.attachments),
    F.document,
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def new_order_attach_doc(msg: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–ª–æ–∂–µ–Ω–∏—è."""
    attachments = _attachments_from_state(await state.get_data())
    if len(attachments) >= ATTACHMENTS_LIMIT:
        await msg.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–ª–æ–∂–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤)")
        return
    doc = msg.document
    attachments.append(
        {
            "file_id": doc.file_id,
            "file_unique_id": doc.file_unique_id,
            "file_type": "document",
            "file_name": doc.file_name,
            "mime_type": doc.mime_type,
            "caption": msg.caption,
        }
    )
    await state.update_data(attachments=attachments)
    await msg.answer(
        f'‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {len(attachments)}. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "–ì–æ—Ç–æ–≤–æ".',
        reply_markup=new_order_attachments_keyboard(True),
    )


@router.callback_query(
    F.data == "adm:new:att:done",
    StateFilter(NewOrderFSM.attachments),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_att_done(cq: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –≤–ª–æ–∂–µ–Ω–∏–π, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞."""
    await state.set_state(NewOrderFSM.order_type)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìù –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑", callback_data="adm:new:type:NORMAL")
    kb.button(text="üîß –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π", callback_data="adm:new:type:GUARANTEE")
    kb.adjust(2)
    await cq.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:", reply_markup=kb.as_markup())
    await cq.answer()


# ============================================
#   -   
# ============================================

@router.callback_query(
    F.data.startswith("adm:new:type:"),
    StateFilter(NewOrderFSM.order_type),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_type(cq: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ (NORMAL –∏–ª–∏ GUARANTEE)."""
    code = cq.data.split(":")[3]
    
    # –Ø–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó v1.1 ¬ß10
    if code == "GUARANTEE":
        await state.update_data(
            order_type=OrderType.GUARANTEE.value,
            company_payment=2500,  # –û–ø–ª–∞—á–∏–≤–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è
            initial_status=None,
        )
    else:
        await state.update_data(
            order_type=OrderType.NORMAL.value,
            company_payment=0,
            initial_status=None,
        )
    
    await state.set_state(NewOrderFSM.slot)
    data = await state.get_data()
    city_id = data.get("city_id")
    if not city_id:
        await cq.answer("‚ùå –û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.", show_alert=True)
        return
    tz = await _resolve_city_timezone(cq.message.bot, city_id)
    workday_start, workday_end = await _resolve_workday_window()
    now_local = time_service.now_in_city(tz)
    options = _slot_options(now_local, workday_start=workday_start, workday_end=workday_end)
    await state.update_data(
        slot_options=options,
        city_timezone=_zone_storage_value(tz),
        pending_asap=False,
    )
    keyboard = new_order_slot_keyboard(options)
    await cq.message.edit_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –¥–ª—è –≤–∏–∑–∏—Ç–∞:", reply_markup=keyboard)
    await cq.answer()


@router.callback_query(
    F.data.startswith("adm:new:slot:"),
    StateFilter(NewOrderFSM.slot),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_slot(cq: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞."""
    key = ":".join(cq.data.split(":")[3:])
    data = await state.get_data()
    city_id = data.get("city_id")
    if not city_id:
        await cq.answer("‚ùå –û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.", show_alert=True)
        return
    await state.set_state(NewOrderFSM.slot)
    options = data.get("slot_options") or []
    valid_keys = {item[0] for item in options}
    if key not in valid_keys:
        await cq.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç", show_alert=True)
        return
    tz_value = data.get("city_timezone")
    if tz_value:
        tz = time_service.resolve_timezone(tz_value)
    else:
        tz = await _resolve_city_timezone(cq.message.bot, city_id)
        await state.update_data(city_timezone=_zone_storage_value(tz))
    workday_start, workday_end = await _resolve_workday_window()
    now_local = time_service.now_in_city(tz)
    if key == "ASAP":
        normalized = time_service.normalize_asap_choice(
            now_local=now_local,
            workday_start=workday_start,
            workday_end=workday_end,
            late_threshold=LATE_ASAP_THRESHOLD,
        )
        if normalized == "DEFERRED_TOM_10_13":
            await state.update_data(pending_asap=True)
            await state.set_state(NewOrderFSM.slot)
            await cq.message.edit_text(
                "      10:00  13:00.  ?",
                reply_markup=new_order_asap_late_keyboard(),
            )
            await cq.answer()
            return
        slot_choice = "ASAP"
        initial_status = None
    else:
        slot_choice = key
        initial_status = None
    try:
        await _finalize_slot_selection(
            message=cq.message,
            state=state,
            slot_choice=slot_choice,
            tz=tz,
            workday_start=workday_start,
            workday_end=workday_end,
            initial_status_override=initial_status,
        )
    except ValueError:
        refreshed_options = _slot_options(
            time_service.now_in_city(tz),
            workday_start=workday_start,
            workday_end=workday_end,
        )
        await state.update_data(slot_options=refreshed_options, pending_asap=False, initial_status=None)
        await state.set_state(NewOrderFSM.slot)
        await cq.message.edit_text(
            "‚è∞ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –∏—Å—Ç—ë–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç:",
            reply_markup=new_order_slot_keyboard(refreshed_options),
        )
        await cq.answer("‚ö†Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç.", show_alert=True)
        return
    await cq.answer()


@router.callback_query(
    F.data == "adm:new:slot:lateok",
    StateFilter(NewOrderFSM.slot),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_slot_lateok(cq: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ ASAP –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
    data = await state.get_data()
    city_id = data.get("city_id")
    if not city_id:
        await cq.answer("–û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return
    tz_value = data.get("city_timezone")
    if tz_value:
        tz = time_service.resolve_timezone(tz_value)
    else:
        tz = await _resolve_city_timezone(cq.message.bot, city_id)
        await state.update_data(city_timezone=_zone_storage_value(tz))
    workday_start, workday_end = await _resolve_workday_window()
    await _finalize_slot_selection(
        message=cq.message,
        state=state,
        slot_choice="TOM:10-13",
        tz=tz,
        workday_start=workday_start,
        workday_end=workday_end,
        initial_status_override=OrderStatus.DEFERRED,
    )
    await cq.answer()


@router.callback_query(
    F.data == "adm:new:slot:reslot",
    StateFilter(NewOrderFSM.slot),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_slot_reslot(cq: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã ASAP."""
    data = await state.get_data()
    city_id = data.get("city_id")
    if not city_id:
        await cq.answer("‚ùå –û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.", show_alert=True)
        return
    await state.set_state(NewOrderFSM.slot)
    tz_value = data.get("city_timezone")
    if tz_value:
        tz = time_service.resolve_timezone(tz_value)
    else:
        tz = await _resolve_city_timezone(cq.message.bot, city_id)
        await state.update_data(city_timezone=_zone_storage_value(tz))
    workday_start, workday_end = await _resolve_workday_window()
    options = _slot_options(
        time_service.now_in_city(tz),
        workday_start=workday_start,
        workday_end=workday_end,
    )
    await state.update_data(slot_options=options, pending_asap=False, initial_status=None)
    await cq.message.edit_text("‚õ∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç:", reply_markup=new_order_slot_keyboard(options))
    await cq.answer()


# ============================================
#   - 
# ============================================

@router.callback_query(
    F.data == "adm:new:confirm",
    StateFilter(NewOrderFSM.confirm),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_confirm(cq: CallbackQuery, state: FSMContext, staff: StaffUser | None = None) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."""
    if staff is None:
        from ..common.helpers import _staff_service
        staff_service = _staff_service(cq.message.bot)
        staff = await staff_service.get_by_tg_id(cq.from_user.id if cq.from_user else 0)
        if staff is None:
            await cq.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    data = await state.get_data()
    city_id = data.get("city_id")
    
    if not city_id:
        await cq.answer("‚ùå –û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å —É—á–µ—Ç–æ–º timezone –≥–æ—Ä–æ–¥–∞
    orders_service = _orders_service(cq.message.bot)
    is_working = await is_working_hours(city_id, orders_service)
    
    if not is_working:
        from aiogram.types import InlineKeyboardButton
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        kb = InlineKeyboardBuilder()
        kb.row(
            InlineKeyboardButton(text=BTN_CONFIRM, callback_data="adm:new:force_confirm"),
            InlineKeyboardButton(text=BTN_CANCEL, callback_data="adm:new:cancel"),
        )
        
        await state.set_state(NewOrderFSM.confirm_deferred)
        await cq.message.edit_text(
            "‚ö†Ô∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (10:00-20:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)</b>\n\n"
            "–ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ <b>DEFERRED</b>:\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ <b>–Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è</b>\n"
            "‚Ä¢ –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –ª–æ–≥–∏—Å—Ç—É –≤ 10:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏?",
            reply_markup=kb.as_markup(),
        )
        await cq.answer()
        return
    
    summary_text = new_order_summary(data)
    try:
        new_order = _build_new_order_data(data, staff)
    except KeyError as e:
        logger.error(f"Admin order creation failed - missing data: {e}. Staff: {staff.id if staff else 'N/A'}")
        await state.clear()
        await cq.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    
    order_id = await orders_service.create_order(new_order)
    
    logger.info(
        f"Admin created order #{order_id}. "
        f"Staff: {staff.id} ({staff.role}), "
        f"City: {new_order.get('city_id')}, "
        f"District: {new_order.get('district_id')}, "
        f"Category: {new_order.get('category')}, "
        f"Type: {new_order.get('order_type')}"
    )
    
    detail = await orders_service.get_card(order_id, city_ids=visible_city_ids_for(staff))
    await state.clear()
    await cq.answer("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
    if detail:
        allow_auto = detail.district_id is not None
        prompt_parts = [f"‚úÖ –ó–∞—è–≤–∫–∞ #{detail.id} —Å–æ–∑–¥–∞–Ω–∞.", summary_text]
        if not allow_auto:
            prompt_parts.append("‚ö†Ô∏è <b>–†–ê–ô–û–ù –ù–ï –£–ö–ê–ó–ê–ù</b>: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –ª–æ–≥–∏—Å—Ç—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        prompt_parts.append("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.")
        prompt = "\n\n".join(prompt_parts)
        markup = assign_menu_keyboard(detail.id, allow_auto=allow_auto)
        try:
            await cq.message.edit_text(prompt, reply_markup=markup, disable_web_page_preview=True)
        except Exception:
            await cq.message.answer(prompt, reply_markup=markup, disable_web_page_preview=True)
        return
    await _render_created_order_card(cq.message, order_id, staff)


@router.callback_query(
    F.data == "adm:new:force_confirm",
    StateFilter(NewOrderFSM.confirm_deferred),
    StaffRoleFilter({StaffRole.GLOBAL_ADMIN, StaffRole.CITY_ADMIN, StaffRole.LOGIST}),
)
async def cb_new_order_force_confirm(cq: CallbackQuery, state: FSMContext, staff: StaffUser | None = None) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤."""
    if staff is None:
        from ..common.helpers import _staff_service
        staff_service = _staff_service(cq.message.bot)
        staff = await staff_service.get_by_tg_id(cq.from_user.id if cq.from_user else 0)
        if staff is None:
            await cq.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
    data = await state.get_data()
    summary_text = new_order_summary(data)
    try:
        new_order = _build_new_order_data(data, staff)
    except KeyError as e:
        logger.error(f"Admin DEFERRED order creation failed - missing data: {e}. Staff: {staff.id if staff else 'N/A'}")
        await state.clear()
        await cq.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    
    orders_service = _orders_service(cq.message.bot)
    order_id = await orders_service.create_order(new_order)
    
    logger.info(
        f"Admin created DEFERRED order #{order_id} (outside working hours). "
        f"Staff: {staff.id} ({staff.role}), "
        f"City: {new_order.get('city_id')}, "
        f"District: {new_order.get('district_id')}, "
        f"Category: {new_order.get('category')}, "
        f"Type: {new_order.get('order_type')}"
    )
    
    detail = await orders_service.get_card(order_id, city_ids=visible_city_ids_for(staff))
    await state.clear()
    await cq.answer("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ DEFERRED (–æ—Ç–ª–æ–∂–µ–Ω–∞)")
    
    if detail:
        allow_auto = detail.district_id is not None
        prompt_parts = [
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{detail.id} —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ <b>DEFERRED</b>.",
            summary_text,
            "üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ 10:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–æ–¥–∞).",
        ]
        if not allow_auto:
            prompt_parts.append(
                "‚ö†Ô∏è <b>–†–ê–ô–û–ù –ù–ï –£–ö–ê–ó–ê–ù</b>: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n"
                "–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –ª–æ–≥–∏—Å—Ç—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."
            )
        prompt_parts.append("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.")
        prompt = "\n\n".join(prompt_parts)
        markup = assign_menu_keyboard(detail.id, allow_auto=allow_auto)
        try:
            await cq.message.edit_text(prompt, reply_markup=markup, disable_web_page_preview=True)
        except Exception:
            await cq.message.answer(prompt, reply_markup=markup, disable_web_page_preview=True)
        return
    
    await _render_created_order_card(cq.message, order_id, staff)


__all__ = ["router"]
