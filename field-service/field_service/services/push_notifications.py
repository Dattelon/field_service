"""
P1-05: PUSH-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤

–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ë–î –æ—á–µ—Ä–µ–¥—å.
"""
from __future__ import annotations

from enum import Enum
from typing import Any, Optional

from aiogram import Bot
from sqlalchemy import insert, select
from sqlalchemy.ext.asyncio import AsyncSession

from field_service.db import models as m
from field_service.services import live_log
from field_service.infra.notify import send_alert


class NotificationEvent(str, Enum):
    """–°–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤
    MODERATION_APPROVED = "moderation_approved"
    MODERATION_REJECTED = "moderation_rejected"
    ACCOUNT_BLOCKED = "account_blocked"
    ACCOUNT_UNBLOCKED = "account_unblocked"
    NEW_OFFER = "new_offer"
    LIMIT_CHANGED = "limit_changed"
    REFERRAL_REGISTERED = "referral_registered"
    REFERRAL_REWARD_ACCRUED = "referral_reward_accrued"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–ª–æ–≥–∏—Å—Ç–æ–≤
    ESCALATION_LOGIST = "escalation_logist"
    ESCALATION_ADMIN = "escalation_admin"
    COMMISSION_OVERDUE = "commission_overdue"

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    UNASSIGNED_ORDERS = "unassigned_orders"


# –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_TEMPLATES = {
    NotificationEvent.MODERATION_APPROVED: (
        "‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
        "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞. "
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏."
    ),
    NotificationEvent.MODERATION_REJECTED: (
        "‚ùå <b>–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
        "–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ."
    ),
    NotificationEvent.ACCOUNT_BLOCKED: (
        "üö´ <b>–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        "–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
    ),
    NotificationEvent.ACCOUNT_UNBLOCKED: (
        "üîì <b>–ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É."
    ),
    NotificationEvent.NEW_OFFER: (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
        "üìç –ê–¥—Ä–µ—Å: {city}, {district}\n"
        "üïê –í—Ä–µ–º—è: {timeslot}\n"
        "‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        "{description}\n\n"
        "–û–∂–∏–¥–∞–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üì• –ù–æ–≤—ã–µ¬ª."
    ),
    NotificationEvent.LIMIT_CHANGED: (
        "üì¶ <b>–ò–∑–º–µ–Ω–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫</b>\n\n"
        "–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {limit}"
    ),
    NotificationEvent.REFERRAL_REGISTERED: (
        "üéâ <b>–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n"
        "–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä:\n"
        "{referred_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã —Å –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ –∑–∞–∫–∞–∑–∞!"
    ),
    NotificationEvent.REFERRAL_REWARD_ACCRUED: (
        "üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å!</b>\n\n"
        "–°—É–º–º–∞: {amount} ‚ÇΩ\n"
        "–£—Ä–æ–≤–µ–Ω—å: {level}\n"
        "–ó–∞–∫–∞–∑: #{order_id}\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª ¬´üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    ),
    NotificationEvent.ESCALATION_LOGIST: (
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ: –∑–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
        "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ª–æ–≥–∏—Å—Ç–∞."
    ),
    NotificationEvent.ESCALATION_ADMIN: (
        "üö® <b>–°—Ä–æ—á–Ω–æ: –∑–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
        "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ª–≥–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
    ),
    NotificationEvent.COMMISSION_OVERDUE: (
        "üö´ <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è #{commission_id}</b>\n\n"
        "–ó–∞–∫–∞–∑: #{order_id}\n"
        "–ú–∞—Å—Ç–µ—Ä: {master_name} (#{master_id})\n"
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ."
    ),
    NotificationEvent.UNASSIGNED_ORDERS: (
        "‚ö†Ô∏è <b>–ù–µ–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {count}</b>\n\n"
        "–í —Å–∏—Å—Ç–µ–º–µ {count} –∑–∞—è–≤–æ–∫ –±–µ–∑ –º–∞—Å—Ç–µ—Ä–∞ –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç."
    ),
}


async def notify_master(
    session: AsyncSession,
    *,
    master_id: int,
    event: NotificationEvent,
    **kwargs: Any,
) -> None:
    """
        notifications_outbox.
    
    Args:
        session:  
        master_id: ID 
        event:  
        **kwargs:   
    """
    template = NOTIFICATION_TEMPLATES.get(event)
    if not template:
        template = ": {event}"
    
    try:
        message = template.format(event=event.value, **kwargs)
    except KeyError as exc:
        live_log.push(
            "notifications",
            f"Template error for {event}: missing key {exc}",
            level="ERROR"
        )
        message = f": {event.value}"
    
    await session.execute(
        insert(m.notifications_outbox).values(
            master_id=master_id,
            event=event.value,
            payload={"message": message, **kwargs},
        )
    )
    
    live_log.push(
        "notifications",
        f"Queued {event.value} for master#{master_id}",
        level="INFO"
    )


async def notify_admin(
    bot: Bot,
    alerts_chat_id: int,
    *,
    event: NotificationEvent,
    **kwargs: Any,
) -> None:
    """
         .
    
    Args:
        bot:  
        alerts_chat_id: ID   
        event:  
        **kwargs:   
    """
    template = NOTIFICATION_TEMPLATES.get(event)
    if not template:
        template = ": {event}"
    
    try:
        message = template.format(event=event.value, **kwargs)
    except KeyError as exc:
        live_log.push(
            "notifications",
            f"Template error for {event}: missing key {exc}",
            level="ERROR"
        )
        message = f": {event.value}"
    
    try:
        await send_alert(bot, message, chat_id=alerts_chat_id)
        live_log.push(
            "notifications",
            f"Sent {event.value} to admin channel",
            level="INFO"
        )
    except Exception as exc:
        live_log.push(
            "notifications",
            f"Failed to send {event.value}: {exc}",
            level="ERROR"
        )


async def notify_logist(
    bot: Bot,
    alerts_chat_id: int,
    *,
    event: NotificationEvent,
    **kwargs: Any,
) -> None:
    """
       (    ).
    
           .
    """
    #        
    await notify_admin(bot, alerts_chat_id, event=event, **kwargs)


#  :

"""
#    (admin_masters.py):
from field_service.services.push_notifications import notify_master, NotificationEvent

await notify_master(
    session,
    master_id=master_id,
    event=NotificationEvent.MODERATION_APPROVED,
)

#   (distribution_worker.py):
from field_service.services.push_notifications import notify_admin, NotificationEvent

await notify_admin(
    bot,
    alerts_chat_id=env_settings.alerts_chat_id,
    event=NotificationEvent.ESCALATION_LOGIST,
    order_id=order_id,
)

#    (watchdogs.py):
await notify_master(
    session,
    master_id=master_id,
    event=NotificationEvent.ACCOUNT_BLOCKED,
    reason="  ",
)

await notify_admin(
    bot,
    alerts_chat_id=env_settings.alerts_chat_id,
    event=NotificationEvent.COMMISSION_OVERDUE,
    commission_id=commission_id,
    order_id=order_id,
    master_id=master_id,
    master_name=master_name,
)
"""

# Service initialization logging disabled for Windows console compatibility
# print(" P1-05: PUSH- -  ")
# print("    ")
