"""
P1-17: –¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Ç–µ—Ä–∞.

–ü—Ä–æ–≤–µ—Ä—è–µ–º:
- –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤
- –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏  
- –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
- –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"""
from __future__ import annotations

import pytest
import pytest_asyncio
from datetime import datetime, timedelta, timezone
from decimal import Decimal

from sqlalchemy import select, text
from sqlalchemy.ext.asyncio import AsyncSession

from field_service.db import models as m


@pytest_asyncio.fixture
async def test_master(async_session: AsyncSession) -> m.masters:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞."""
    master = m.masters(
        tg_user_id=100001,
        full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ú–∞—Å—Ç–µ—Ä",
        phone="+79991234567",
        verified=True,
        moderation_status=m.ModerationStatus.APPROVED,
        shift_status=m.ShiftStatus.SHIFT_ON,
        rating=5.0,
    )
    async_session.add(master)
    await async_session.commit()
    await async_session.refresh(master)
    return master


@pytest_asyncio.fixture
async def test_city(async_session: AsyncSession) -> m.cities:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥."""
    city = m.cities(name="–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Ä–æ–¥", is_active=True)
    async_session.add(city)
    await async_session.commit()
    await async_session.refresh(city)
    return city


async def _get_db_now(session: AsyncSession) -> datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ë–î."""
    row = await session.execute(text("SELECT NOW()"))
    return row.scalar()


async def test_statistics_no_orders(async_session: AsyncSession, test_master: m.masters) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤."""
    from field_service.bots.master_bot.handlers.statistics import handle_statistics
    from unittest.mock import AsyncMock, MagicMock
    from aiogram.fsm.context import FSMContext
    
    # Mock callback query
    callback = AsyncMock()
    callback.message = MagicMock()
    callback.message.edit_text = AsyncMock()
    
    # Mock state
    state = AsyncMock(spec=FSMContext)
    state.clear = AsyncMock()
    
    # –í—ã–∑—ã–≤–∞–µ–º handler
    await handle_statistics(callback, state, test_master, async_session)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    assert callback.message.edit_text.called or hasattr(callback.message, 'text')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É state
    state.clear.assert_called_once()


async def test_statistics_with_completed_orders(
    async_session: AsyncSession,
    test_master: m.masters,
    test_city: m.cities,
) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏."""
    db_now = await _get_db_now(async_session)
    
    # –°–æ–∑–¥–∞—ë–º 15 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    for i in range(15):
        order = m.orders(
            city_id=test_city.id,
            client_phone=f"+799912345{i:02d}",
            category=m.OrderCategory.ELECTRICS,
            status=m.OrderStatus.CLOSED,
            assigned_master_id=test_master.id,
            total_sum=Decimal("1000.00"),
            created_at=db_now - timedelta(days=i),
            updated_at=db_now - timedelta(days=i),
        )
        async_session.add(order)
    
    await async_session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—á—ë—Ç —á–µ—Ä–µ–∑ SQL
    completed_query = select(m.orders.id).where(
        m.orders.assigned_master_id == test_master.id,
        m.orders.status == m.OrderStatus.CLOSED,
    )
    result = await async_session.execute(completed_query)
    completed_count = len(result.all())
    
    assert completed_count == 15


async def test_statistics_response_time_calculation(
    async_session: AsyncSession,
    test_master: m.masters,
    test_city: m.cities,
) -> None:
    """–†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞."""
    db_now = await _get_db_now(async_session)
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    order = m.orders(
        city_id=test_city.id,
        client_phone="+79991234567",
        category=m.OrderCategory.ELECTRICS,
        status=m.OrderStatus.ASSIGNED,
        assigned_master_id=test_master.id,
        total_sum=Decimal("1000.00"),
    )
    async_session.add(order)
    await async_session.commit()
    await async_session.refresh(order)
    
    # –°–æ–∑–¥–∞—ë–º –æ—Ñ—Ñ–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–∫–ª–∏–∫–∞
    offers_data = [
        (5,),   # 5 –º–∏–Ω—É—Ç
        (10,),  # 10 –º–∏–Ω—É—Ç
        (20,),  # 20 –º–∏–Ω—É—Ç
    ]
    
    for minutes_delta in offers_data:
        minutes = minutes_delta[0]
        offer = m.offers(
            order_id=order.id,
            master_id=test_master.id,
            state=m.OfferState.ACCEPTED,
            sent_at=db_now,
            responded_at=db_now + timedelta(minutes=minutes),
            round_number=1,
        )
        async_session.add(offer)
    
    await async_session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    from sqlalchemy import func
    response_time_query = select(
        func.avg(
            func.extract("EPOCH", m.offers.responded_at - m.offers.sent_at) / 60
        )
    ).where(
        m.offers.master_id == test_master.id,
        m.offers.state == m.OfferState.ACCEPTED,
        m.offers.responded_at.isnot(None),
    )
    
    result = await async_session.execute(response_time_query)
    avg_minutes = result.scalar()
    
    # –°—Ä–µ–¥–Ω–µ–µ: (5 + 10 + 20) / 3 ‚âà 11.67 –º–∏–Ω—É—Ç
    assert avg_minutes is not None
    assert 11 <= float(avg_minutes) <= 12


async def test_statistics_month_filter(
    async_session: AsyncSession,
    test_master: m.masters,
    test_city: m.cities,
) -> None:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."""
    db_now = await _get_db_now(async_session)
    month_start = db_now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    # –°–æ–∑–¥–∞—ë–º 5 –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    for i in range(5):
        order = m.orders(
            city_id=test_city.id,
            client_phone=f"+799912345{i:02d}",
            category=m.OrderCategory.ELECTRICS,
            status=m.OrderStatus.CLOSED,
            assigned_master_id=test_master.id,
            total_sum=Decimal("1000.00"),
            created_at=month_start + timedelta(days=i),
            updated_at=month_start + timedelta(days=i),
        )
        async_session.add(order)
    
    # –°–æ–∑–¥–∞—ë–º 3 –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ
    last_month = month_start - timedelta(days=1)
    for i in range(3):
        order = m.orders(
            city_id=test_city.id,
            client_phone=f"+799912350{i:02d}",
            category=m.OrderCategory.PLUMBING,
            status=m.OrderStatus.CLOSED,
            assigned_master_id=test_master.id,
            total_sum=Decimal("1500.00"),
            created_at=last_month - timedelta(days=i),
            updated_at=last_month - timedelta(days=i),
        )
        async_session.add(order)
    
    await async_session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—á—ë—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    month_query = select(m.orders.id).where(
        m.orders.assigned_master_id == test_master.id,
        m.orders.status == m.OrderStatus.CLOSED,
        m.orders.updated_at >= month_start,
    )
    result = await async_session.execute(month_query)
    month_count = len(result.all())
    
    assert month_count == 5


@pytest.mark.parametrize("completed_count,expected_message_part", [
    (0, "üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã"),
    (5, "üí™ –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ"),
    (25, "üî• –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å"),
    (75, "‚≠ê –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Å–æ—Ç–Ω–µ"),
    (150, "üèÜ –í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"),
])
async def test_statistics_motivational_messages(
    async_session: AsyncSession,
    completed_count: int,
    expected_message_part: str,
) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤."""
    
    # –°–æ–∑–¥–∞—ë–º –≥–æ—Ä–æ–¥
    city = m.cities(name="–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Ä–æ–¥", is_active=True)
    async_session.add(city)
    await async_session.flush()
    
    # –°–æ–∑–¥–∞—ë–º –º–∞—Å—Ç–µ—Ä–∞
    master = m.masters(
        tg_user_id=100001,
        full_name="–¢–µ—Å—Ç–æ–≤—ã–π –ú–∞—Å—Ç–µ—Ä",
        phone="+79991234567",
        verified=True,
        moderation_status=m.ModerationStatus.APPROVED,
        shift_status=m.ShiftStatus.SHIFT_ON,
        rating=5.0,
    )
    async_session.add(master)
    await async_session.flush()
    
    # –°–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    db_now = await _get_db_now(async_session)
    for i in range(completed_count):
        order = m.orders(
            city_id=city.id,
            client_phone=f"+79991{i:06d}",
            category=m.OrderCategory.ELECTRICS,
            status=m.OrderStatus.CLOSED,
            assigned_master_id=master.id,
            total_sum=Decimal("1000.00"),
            created_at=db_now - timedelta(days=i),
            updated_at=db_now - timedelta(days=i),
        )
        async_session.add(order)
    
    await async_session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    count_query = select(m.orders.id).where(
        m.orders.assigned_master_id == master.id,
        m.orders.status == m.OrderStatus.CLOSED,
    )
    result = await async_session.execute(count_query)
    actual_count = len(result.all())
    
    assert actual_count == completed_count


async def test_statistics_formatting_response_time(
    async_session: AsyncSession,
    test_master: m.masters,
    test_city: m.cities,
) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ (–º–∏–Ω—É—Ç—ã vs —á–∞—Å—ã)."""
    db_now = await _get_db_now(async_session)
    
    order = m.orders(
        city_id=test_city.id,
        client_phone="+79991234567",
        category=m.OrderCategory.ELECTRICS,
        status=m.OrderStatus.ASSIGNED,
        assigned_master_id=test_master.id,
        total_sum=Decimal("1000.00"),
    )
    async_session.add(order)
    await async_session.commit()
    await async_session.refresh(order)
    
    # –¢–µ—Å—Ç 1: < 60 –º–∏–Ω—É—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö)
    offer_minutes = m.offers(
        order_id=order.id,
        master_id=test_master.id,
        state=m.OfferState.ACCEPTED,
        sent_at=db_now,
        responded_at=db_now + timedelta(minutes=45),
        round_number=1,
    )
    async_session.add(offer_minutes)
    await async_session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ < 60
    from sqlalchemy import func
    response_query = select(
        func.avg(
            func.extract("EPOCH", m.offers.responded_at - m.offers.sent_at) / 60
        )
    ).where(
        m.offers.master_id == test_master.id,
        m.offers.state == m.OfferState.ACCEPTED,
        m.offers.responded_at.isnot(None),
    )
    
    result = await async_session.execute(response_query)
    avg_minutes = result.scalar()
    
    assert avg_minutes is not None
    assert float(avg_minutes) < 60  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–∞—Å–∞
