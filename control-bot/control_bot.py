# -*- coding: utf-8 -*-
"""
Field Service Control Bot
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ Telegram
"""

import os
import asyncio
import logging
from datetime import datetime
from functools import wraps
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from dotenv import load_dotenv
import paramiko

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
SERVER_HOST = os.getenv("SERVER_HOST")
SERVER_USER = os.getenv("SERVER_USER")
SERVER_PASSWORD = os.getenv("SERVER_PASSWORD")
PROJECT_PATH = "/opt/field-service"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# SSH –∫–ª–∏–µ–Ω—Ç
def ssh_execute(command: str, timeout: int = 30) -> tuple[str, int]:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ SSH"""
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD, timeout=10)
        
        stdin, stdout, stderr = ssh.exec_command(command, timeout=timeout)
        output = stdout.read().decode('utf-8', errors='ignore')
        error = stderr.read().decode('utf-8', errors='ignore')
        exit_code = stdout.channel.recv_exit_status()
        
        ssh.close()
        
        result = output + error if error else output
        return result.strip(), exit_code
    except Exception as e:
        return f"‚ùå SSH Error: {str(e)}", 1

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û - –¥–æ–±–∞–≤–ª–µ–Ω @wraps)
def check_admin(func):
    @wraps(func)
    async def wrapper(message_or_callback, **kwargs):
        user_id = message_or_callback.from_user.id
        if user_id != ADMIN_ID:
            if isinstance(message_or_callback, Message):
                await message_or_callback.answer("‚ùå Access denied")
            else:
                await message_or_callback.answer("‚ùå Access denied", show_alert=True)
            return
        return await func(message_or_callback, **kwargs)
    return wrapper

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
            InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="logs")
        ],
        [
            InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start"),
            InlineKeyboardButton(text="‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart"),
            InlineKeyboardButton(text="üè• –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="health")
        ],
        [
            InlineKeyboardButton(text="üíæ –ë–µ–∫–∞–ø—ã –ë–î", callback_data="backups"),
        ],
        [
            InlineKeyboardButton(text="üöÄ –î–µ–ø–ª–æ–π", callback_data="deploy_confirm"),
        ],
        [
            InlineKeyboardButton(text="üîÑ Git Pull + –î–µ–ø–ª–æ–π", callback_data="git_deploy_confirm"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ú–µ–Ω—é –¥–µ–ø–ª–æ—è
def deploy_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–ø–ª–æ–π", callback_data="deploy_execute")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ú–µ–Ω—é Git –¥–µ–ø–ª–æ—è
def git_deploy_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Git Pull + –î–µ–ø–ª–æ–π", callback_data="git_deploy_execute")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
@check_admin
async def cmd_start(message: Message, **kwargs):
    await message.answer(
        "ü§ñ <b>Field Service Control Bot</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ:\n"
        f"üìç –°–µ—Ä–≤–µ—Ä: {SERVER_HOST}\n"
        f"üìÅ –ü—Ä–æ–µ–∫—Ç: {PROJECT_PATH}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "menu")
@check_admin
async def show_menu(callback: CallbackQuery, **kwargs):
    await callback.message.edit_text(
        "ü§ñ <b>Field Service Control Bot</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

# –°—Ç–∞—Ç—É—Å
@dp.callback_query(F.data == "status")
@check_admin
async def show_status(callback: CallbackQuery, **kwargs):
    await callback.answer("‚è≥ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å...")
    
    cmd = f"cd {PROJECT_PATH} && docker compose ps --format json"
    output, _ = ssh_execute(cmd)
    
    # –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—É—Å
    status_text = "üìä <b>–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:</b>\n\n"
    
    try:
        import json
        containers = [json.loads(line) for line in output.strip().split('\n') if line]
        for c in containers:
            name = c.get('Service', 'unknown')
            state = c.get('State', 'unknown')
            emoji = "‚úÖ" if state == "running" else "‚ùå"
            status_text += f"{emoji} <code>{name}</code>: {state}\n"
    except:
        status_text += f"<pre>{output[:500]}</pre>"
    
    await callback.message.edit_text(
        status_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="status")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
        ]),
        parse_mode="HTML"
    )

# –õ–æ–≥–∏
@dp.callback_query(F.data == "logs")
@check_admin
async def show_logs_menu(callback: CallbackQuery, **kwargs):
    keyboard = [
        [
            InlineKeyboardButton(text="Admin Bot", callback_data="logs_admin"),
            InlineKeyboardButton(text="Master Bot", callback_data="logs_master")
        ],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
    ]
    await callback.message.edit_text(
        "üìã <b>–õ–æ–≥–∏ –±–æ—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("logs_"))
@check_admin
async def show_logs(callback: CallbackQuery, **kwargs):
    service = callback.data.split("_")[1]
    await callback.answer(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ª–æ–≥–∏ {service}-bot...")
    
    cmd = f"cd {PROJECT_PATH} && docker compose logs {service}-bot --tail=30"
    output, _ = ssh_execute(cmd, timeout=15)
    
    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(output) > 3500:
        output = output[-3500:]
    
    await callback.message.edit_text(
        f"üìã <b>–õ–æ–≥–∏ {service}-bot (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫):</b>\n\n"
        f"<pre>{output}</pre>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"logs_{service}")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="logs")]
        ]),
        parse_mode="HTML"
    )

# –ó–∞–ø—É—Å–∫
@dp.callback_query(F.data == "start")
@check_admin
async def start_bots(callback: CallbackQuery, **kwargs):
    await callback.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç—ã...")
    
    cmd = f"cd {PROJECT_PATH} && docker compose up -d admin-bot master-bot"
    output, exit_code = ssh_execute(cmd, timeout=30)
    
    emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
    await callback.message.edit_text(
        f"{emoji} <b>–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤</b>\n\n<pre>{output[:1000]}</pre>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
        ]),
        parse_mode="HTML"
    )

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞
@dp.callback_query(F.data == "stop")
@check_admin
async def stop_bots(callback: CallbackQuery, **kwargs):
    await callback.answer("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç—ã...")
    
    cmd = f"cd {PROJECT_PATH} && docker compose stop admin-bot master-bot"
    output, exit_code = ssh_execute(cmd, timeout=30)
    
    emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
    await callback.message.edit_text(
        f"{emoji} <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤</b>\n\n<pre>{output[:1000]}</pre>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
        ]),
        parse_mode="HTML"
    )

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
@dp.callback_query(F.data == "restart")
@check_admin
async def restart_bots(callback: CallbackQuery, **kwargs):
    await callback.answer("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç—ã...")
    
    cmd = f"cd {PROJECT_PATH} && docker compose restart admin-bot master-bot"
    output, exit_code = ssh_execute(cmd, timeout=45)
    
    emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
    await callback.message.edit_text(
        f"{emoji} <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤</b>\n\n<pre>{output[:1000]}</pre>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
        ]),
        parse_mode="HTML"
    )

# –ó–¥–æ—Ä–æ–≤—å–µ
@dp.callback_query(F.data == "health")
@check_admin
async def show_health(callback: CallbackQuery, **kwargs):
    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ...")
    
    commands = {
        "Containers": f"cd {PROJECT_PATH} && docker compose ps",
        "Disk": "df -h | grep -E '(Filesystem|/dev/)' | head -3",
        "Memory": "free -h | head -2",
        "Heartbeat": f"cd {PROJECT_PATH} && docker compose logs --since 5m | grep 'alive' | tail -3"
    }
    
    health_text = "üè• <b>–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n\n"
    
    for name, cmd in commands.items():
        output, _ = ssh_execute(cmd, timeout=10)
        health_text += f"<b>{name}:</b>\n<pre>{output[:300]}</pre>\n\n"
    
    if len(health_text) > 3500:
        health_text = health_text[:3500] + "..."
    
    await callback.message.edit_text(
        health_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="health")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
        ]),
        parse_mode="HTML"
    )

# ==================== –ë–ï–ö–ê–ü–´ –ë–î ====================

# –ú–µ–Ω—é –±–µ–∫–∞–ø–æ–≤
@dp.callback_query(F.data == "backups")
@check_admin
async def show_backups_menu(callback: CallbackQuery, **kwargs):
    keyboard = [
        [
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤", callback_data="backups_list"),
        ],
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø", callback_data="backup_create_confirm"),
        ],
        [
            InlineKeyboardButton(text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="backup_restore_list"),
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="backup_cleanup_confirm"),
        ],
        [
            InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")
        ]
    ]
    await callback.message.edit_text(
        "üíæ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∫–∞–ø–∞–º–∏ –ë–î</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()

# –°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤
@dp.callback_query(F.data == "backups_list")
@check_admin
async def show_backups_list(callback: CallbackQuery, **kwargs):
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤ –∏–∑ –≤—Å–µ—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    cmd = """
    echo '=== DAILY BACKUPS (last 7 days) ===' && \
    ls -lht /opt/backups/daily/field_service_*.sql.gz 2>/dev/null | head -10 && \
    echo '' && \
    echo '=== WEEKLY BACKUPS (last 4 weeks) ===' && \
    ls -lht /opt/backups/weekly/field_service_*.sql.gz 2>/dev/null | head -5 && \
    echo '' && \
    echo '=== MONTHLY BACKUPS (last 12 months) ===' && \
    ls -lht /opt/backups/monthly/field_service_*.sql.gz 2>/dev/null | head -5
    """
    output, exit_code = ssh_execute(cmd, timeout=10)
    
    if exit_code != 0 or not output:
        await callback.message.edit_text(
            "üíæ <b>–ë–µ–∫–∞–ø—ã –ë–î</b>\n\n"
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤\n\n"
            f"<pre>{output[:500] if output else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</pre>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")]
            ]),
            parse_mode="HTML"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    backups_text = "üíæ <b>–°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤ –ë–î</b>\n\n"
    
    if output:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è Telegram
        formatted = output.replace('=== ', 'üìÇ <b>').replace(' ===', '</b>')
        backups_text += f"<pre>{formatted}</pre>"
    else:
        backups_text += "‚ùå –ë–µ–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –±–µ–∫–∞–ø–æ–≤
    cmd_size = "du -sh /opt/backups/ 2>/dev/null | awk '{print $1}'"
    total_size, _ = ssh_execute(cmd_size, timeout=5)
    
    if total_size and total_size.strip():
        backups_text += f"\n\nüíΩ <b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {total_size.strip()}"
    
    if len(backups_text) > 3900:
        backups_text = backups_text[:3900] + "\n\n<i>...—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω</i>"
    
    await callback.message.edit_text(
        backups_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="backups_list")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")]
        ]),
        parse_mode="HTML"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query(F.data == "backup_create_confirm")
@check_admin
async def backup_create_confirm(callback: CallbackQuery, **kwargs):
    await callback.message.edit_text(
        "üíæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –ë–î</b>\n\n"
        "‚ö†Ô∏è –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –±–µ–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø", callback_data="backup_create_execute")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.callback_query(F.data == "backup_create_execute")
@check_admin
async def backup_create_execute(callback: CallbackQuery, **kwargs):
    await callback.answer()
    await callback.message.edit_text(
        "üíæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞...</b>\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    # –°–æ–∑–¥–∞—ë–º –±–µ–∫–∞–ø —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç
    cmd = "/usr/local/bin/field-service-backup.sh manual"
    output, exit_code = ssh_execute(cmd, timeout=120)
    
    emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±–µ–∫–∞–ø
    cmd_last = "ls -lht /opt/backups/manual/field_service_*.sql.gz 2>/dev/null | head -1"
    last_backup, _ = ssh_execute(cmd_last, timeout=5)
    
    result_text = f"{emoji} <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞</b>\n\n"
    
    if exit_code == 0:
        result_text += "‚úÖ –ë–µ–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        if last_backup:
            parts = last_backup.strip().split()
            if len(parts) >= 5:
                filename = parts[0].split('/')[-1]
                size = parts[1]
                date_time = ' '.join(parts[2:5])
                result_text += f"üìÅ <code>{filename}</code>\n"
                result_text += f"üìä –†–∞–∑–º–µ—Ä: {size}\n"
                result_text += f"üïê –î–∞—Ç–∞: {date_time}\n"
    else:
        result_text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ–∫–∞–ø–∞\n\n"
        result_text += f"<pre>{output[:500]}</pre>"
    
    await callback.message.edit_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤", callback_data="backups_list")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")]
        ]),
        parse_mode="HTML"
    )

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
@dp.callback_query(F.data == "backup_restore_list")
@check_admin
async def backup_restore_list(callback: CallbackQuery, **kwargs):
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–µ–∫–∞–ø–æ–≤ –∏–∑ –≤—Å–µ—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    cmd = """
    (ls -1t /opt/backups/daily/field_service_*.sql.gz 2>/dev/null; \
     ls -1t /opt/backups/weekly/field_service_*.sql.gz 2>/dev/null; \
     ls -1t /opt/backups/monthly/field_service_*.sql.gz 2>/dev/null; \
     ls -1t /opt/backups/manual/field_service_*.sql.gz 2>/dev/null) | head -10
    """
    output, exit_code = ssh_execute(cmd, timeout=10)
    
    if exit_code != 0 or not output:
        await callback.message.edit_text(
            "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î</b>\n\n"
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")]
            ]),
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–µ–∫–∞–ø–∞
    keyboard = []
    files = output.strip().split('\n')
    
    for filepath in files[:10]:
        filename = filepath.split('/')[-1]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: field_service_YYYYMMDD_HHMMSS.sql.gz)
        try:
            date_part = filename.split('_')[1:3]
            if len(date_part) == 2:
                date_str = f"{date_part[0]} {date_part[1].split('.')[0]}"
                button_text = f"üìÖ {date_str}"
            else:
                button_text = filename[:30]
        except:
            button_text = filename[:30]
        
        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"restore_{filepath}"  # –ü–µ—Ä–µ–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")])
    
    await callback.message.edit_text(
        "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î</b>\n\n"
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â—É—é –ë–î!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–µ–∫–∞–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query(F.data.startswith("restore_"))
@check_admin
async def backup_restore_confirm(callback: CallbackQuery, **kwargs):
    filepath = callback.data.replace("restore_", "")
    filename = filepath.split('/')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    await callback.message.edit_text(
        "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î</b>\n\n"
        f"‚ö†Ô∏è <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–ï–ô–°–¢–í–ò–ï!</b>\n\n"
        f"–ë—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–µ–∫–∞–ø:\n"
        f"üìÅ <code>{filename}</code>\n\n"
        f"–≠—Ç–æ:\n"
        f"‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ –±–æ—Ç—ã\n"
        f"‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â—É—é –ë–î\n"
        f"‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç—ã –∑–∞–Ω–æ–≤–æ\n\n"
        f"‚ö†Ô∏è –í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –£–î–ê–õ–ï–ù–´!\n\n"
        f"–í—ã –£–í–ï–†–ï–ù–´?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ö†Ô∏è –î–ê, –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨", callback_data=f"restore_exec_{filepath}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="backups")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.callback_query(F.data.startswith("restore_exec_"))
@check_admin
async def backup_restore_execute(callback: CallbackQuery, **kwargs):
    filepath = callback.data.replace("restore_exec_", "")  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
    
    await callback.answer()
    await callback.message.edit_text(
        "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î...</b>\n\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    restore_steps = [
        ("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤", f"cd {PROJECT_PATH} && docker compose stop admin-bot master-bot"),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∫–∞–ø–∞", f"test -f {filepath} && echo 'OK' || echo 'NOT FOUND'"),
        ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î", f"cd {PROJECT_PATH} && zcat {filepath} | docker compose exec -T postgres psql -U fieldservice -d fieldservice"),
        ("–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤", f"cd {PROJECT_PATH} && docker compose up -d admin-bot master-bot"),
    ]
    
    result_text = "üîÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n\n"
    
    for step_name, cmd in restore_steps:
        result_text += f"‚è≥ {step_name}...\n"
        await callback.message.edit_text(result_text, parse_mode="HTML")
        
        timeout = 180 if "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" in step_name else 60
        output, exit_code = ssh_execute(cmd, timeout=timeout)
        
        emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
        result_text = result_text.replace(f"‚è≥ {step_name}...", f"{emoji} {step_name}")
        
        if exit_code != 0:
            result_text += f"\n\n‚ùå <b>–û—à–∏–±–∫–∞:</b>\n<pre>{output[:500]}</pre>"
            break
    
    result_text += "\n\n"
    result_text += "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" if exit_code == 0 else "‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
    
    await callback.message.edit_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")]
        ]),
        parse_mode="HTML"
    )

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query(F.data == "backup_cleanup_confirm")
@check_admin
async def backup_cleanup_confirm(callback: CallbackQuery, **kwargs):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤ (manual —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    cmd = "find /opt/backups/manual/ -name 'field_service_*.sql.gz' -mtime +30 2>/dev/null | wc -l"
    count, _ = ssh_execute(cmd, timeout=10)
    
    count_num = int(count.strip()) if count.strip().isdigit() else 0
    
    await callback.message.edit_text(
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤</b>\n\n"
        f"–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∫–∞–ø—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π.\n\n"
        f"üìä –ù–∞–π–¥–µ–Ω–æ: {count_num} —Ñ–∞–π–ª–æ–≤\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data="backup_cleanup_execute")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.callback_query(F.data == "backup_cleanup_execute")
@check_admin
async def backup_cleanup_execute(callback: CallbackQuery, **kwargs):
    await callback.answer()
    await callback.message.edit_text(
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤...</b>\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    # –£–¥–∞–ª—è–µ–º manual –±–µ–∫–∞–ø—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    cmd = "find /opt/backups/manual/ -name 'field_service_*.sql.gz' -mtime +30 -delete -print 2>/dev/null"
    output, exit_code = ssh_execute(cmd, timeout=30)
    
    deleted_count = len(output.strip().split('\n')) if output.strip() else 0
    
    emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
    result_text = f"{emoji} <b>–û—á–∏—Å—Ç–∫–∞ –±–µ–∫–∞–ø–æ–≤</b>\n\n"
    
    if exit_code == 0:
        result_text += f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}\n\n"
        if output and deleted_count > 0:
            files_list = '\n'.join([f.split('/')[-1] for f in output.strip().split('\n')[:10]])
            result_text += f"<pre>{files_list}</pre>"
            if deleted_count > 10:
                result_text += f"\n<i>...–∏ –µ—â—ë {deleted_count - 10} —Ñ–∞–π–ª–æ–≤</i>"
    else:
        result_text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"
    
    await callback.message.edit_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤", callback_data="backups_list")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="backups")]
        ]),
        parse_mode="HTML"
    )

# ==================== –ö–û–ù–ï–¶ –°–ï–ö–¶–ò–ò –ë–ï–ö–ê–ü–û–í ====================

# –î–µ–ø–ª–æ–π - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query(F.data == "deploy_confirm")
@check_admin
async def deploy_confirm(callback: CallbackQuery, **kwargs):
    await callback.message.edit_text(
        "üöÄ <b>–î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω</b>\n\n"
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "–≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞\n"
        "‚Ä¢ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤\n\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç 3-5 –º–∏–Ω—É—Ç.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=deploy_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

# –î–µ–ø–ª–æ–π - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.callback_query(F.data == "deploy_execute")
@check_admin
async def deploy_execute(callback: CallbackQuery, **kwargs):
    await callback.answer()
    await callback.message.edit_text(
        "üöÄ <b>–ó–∞–ø—É—Å–∫–∞—é –¥–µ–ø–ª–æ–π...</b>\n\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    deploy_steps = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞", "/usr/local/bin/field-service-backup.sh daily"),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞", f"cd {PROJECT_PATH} && docker compose ps"),
        ("–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤", f"cd {PROJECT_PATH} && docker compose build --no-cache"),
        ("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", f"cd {PROJECT_PATH} && docker compose run --rm admin-bot alembic upgrade head"),
        ("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", f"cd {PROJECT_PATH} && docker compose up -d --no-deps admin-bot master-bot"),
    ]
    
    result_text = "üöÄ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ø–ª–æ—è:</b>\n\n"
    
    for step_name, cmd in deploy_steps:
        result_text += f"‚è≥ {step_name}...\n"
        await callback.message.edit_text(result_text, parse_mode="HTML")
        
        timeout = 300 if "build" in cmd.lower() else 120
        output, exit_code = ssh_execute(cmd, timeout=timeout)
        
        emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
        result_text = result_text.replace(f"‚è≥ {step_name}...", f"{emoji} {step_name}")
        
        if exit_code != 0:
            result_text += f"\n\n‚ùå <b>–û—à–∏–±–∫–∞:</b>\n<pre>{output[:500]}</pre>"
            break
    
    result_text += "\n\n"
    result_text += "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!" if exit_code == 0 else "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏"
    
    await callback.message.edit_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏", callback_data="logs")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
        ]),
        parse_mode="HTML"
    )

# Git –î–µ–ø–ª–æ–π - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.callback_query(F.data == "git_deploy_confirm")
@check_admin
async def git_deploy_confirm(callback: CallbackQuery, **kwargs):
    await callback.message.edit_text(
        "üîÑ <b>Git Pull + –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω</b>\n\n"
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "–≠—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑ GitHub:\n"
        "‚Ä¢ Git pull (–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–¥–∞)\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î\n"
        "‚Ä¢ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤\n\n"
        "–≠—Ç–æ –∑–∞–π–º—ë—Ç 3-5 –º–∏–Ω—É—Ç.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=git_deploy_menu(),
        parse_mode="HTML"
    )
    await callback.answer()

# Git –î–µ–ø–ª–æ–π - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
@dp.callback_query(F.data == "git_deploy_execute")
@check_admin
async def git_deploy_execute(callback: CallbackQuery, **kwargs):
    await callback.answer()
    await callback.message.edit_text(
        "üîÑ <b>–ó–∞–ø—É—Å–∫–∞—é Git Pull + –î–µ–ø–ª–æ–π...</b>\n\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )
    
    deploy_steps = [
        ("Git Pull", f"cd {PROJECT_PATH} && git fetch origin main && git reset --hard origin/main"),
        ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .env", f"cp /tmp/field-service.env.backup {PROJECT_PATH}/.env"),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞", "/usr/local/bin/field-service-backup.sh daily"),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞", f"cd {PROJECT_PATH} && docker compose ps"),
        ("–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤", f"cd {PROJECT_PATH} && docker compose build --no-cache"),
        ("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π", f"cd {PROJECT_PATH} && docker compose run --rm admin-bot alembic upgrade head"),
        ("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", f"cd {PROJECT_PATH} && docker compose up -d --no-deps admin-bot master-bot"),
    ]
    
    result_text = "üîÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç Git Pull + –î–µ–ø–ª–æ—è:</b>\n\n"
    
    for step_name, cmd in deploy_steps:
        result_text += f"‚è≥ {step_name}...\n"
        await callback.message.edit_text(result_text, parse_mode="HTML")
        
        timeout = 300 if "build" in cmd.lower() else 120
        output, exit_code = ssh_execute(cmd, timeout=timeout)
        
        emoji = "‚úÖ" if exit_code == 0 else "‚ùå"
        result_text = result_text.replace(f"‚è≥ {step_name}...", f"{emoji} {step_name}")
        
        if exit_code != 0:
            result_text += f"\n\n‚ùå <b>–û—à–∏–±–∫–∞:</b>\n<pre>{output[:500]}</pre>"
            break
    
    result_text += "\n\n"
    result_text += "‚úÖ Git Pull + –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!" if exit_code == 0 else "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏"
    
    await callback.message.edit_text(
        result_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏", callback_data="logs")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="menu")]
        ]),
        parse_mode="HTML"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("ü§ñ Control Bot starting...")
    logger.info(f"üë§ Admin ID: {ADMIN_ID}")
    logger.info(f"üñ•Ô∏è Server: {SERVER_HOST}")
    logger.info(f"üìÅ Project: {PROJECT_PATH}")
    
    try:
        logger.info("Initializing bot and dispatcher...")
        logger.info(f"Bot token: {BOT_TOKEN[:20]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –≤–∞–ª–∏–¥–Ω—ã–π
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ Bot connected: @{bot_info.username} ({bot_info.first_name})")
        
        logger.info("Starting polling...")
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå Error starting bot: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    try:
        logger.info("=" * 50)
        logger.info("CONTROL BOT INITIALIZING")
        logger.info("=" * 50)
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
