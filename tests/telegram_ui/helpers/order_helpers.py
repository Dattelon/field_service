"""
Helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
"""
import asyncio
from typing import Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text

from tests.telegram_ui.bot_client import BotTestClient
from tests.telegram_ui.config import ADMIN_BOT_USERNAME


async def create_order_via_admin(
    client: BotTestClient,
    session: AsyncSession,
    *,
    service: str = "–†–µ–º–æ–Ω—Ç iPhone",
    city: str = "–ú–æ—Å–∫–≤–∞",
    district: str = "–¶–ê–û",
    address: str = "—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1",
    client_phone: str = "+79991234567",
    cost: int = 3000,
    slot: str = "nearest",  # "nearest" –∏–ª–∏ "12:00-14:00"
) -> int:
    """
    –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
    
    Args:
        client: Telethon –∫–ª–∏–µ–Ω—Ç
        session: –ë–î —Å–µ—Å—Å–∏—è
        service: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
        city: –ì–æ—Ä–æ–¥
        district: –†–∞–π–æ–Ω
        address: –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
        client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
        cost: –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
        slot: –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
    
    Returns:
        order_id: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–±–æ—Ç
    await client.send_command(ADMIN_BOT_USERNAME, "/start")
    await asyncio.sleep(1)
    
    # –ù–∞–∂–∏–º–∞–µ–º "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑"
    await client.click_button("‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", ADMIN_BOT_USERNAME)
    await asyncio.sleep(1)
    
    # –í—ã–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥
    await client.click_button(city, ADMIN_BOT_USERNAME)
    await asyncio.sleep(1)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–π–æ–Ω
    await client.click_button(district, ADMIN_BOT_USERNAME)
    await asyncio.sleep(1)
    
    # –í–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å
    await client.send_command(ADMIN_BOT_USERNAME, address)
    await asyncio.sleep(1)
    
    # –í—ã–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥—É
    await client.click_button(service, ADMIN_BOT_USERNAME)
    await asyncio.sleep(1)
    
    # –í–≤–æ–¥–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    await client.send_command(ADMIN_BOT_USERNAME, str(cost))
    await asyncio.sleep(1)
    
    # –í–≤–æ–¥–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
    await client.send_command(ADMIN_BOT_USERNAME, client_phone)
    await asyncio.sleep(1)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ—Ç
    if slot == "nearest":
        # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç (–ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞)
        msg = await client.get_last_message(ADMIN_BOT_USERNAME)
        if msg and msg.reply_markup:
            buttons = msg.reply_markup.rows[0].buttons
            if buttons:
                await client.click_button(buttons[0].text, ADMIN_BOT_USERNAME)
    else:
        await client.click_button(slot, ADMIN_BOT_USERNAME)
    
    await asyncio.sleep(2)
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –≤ –ë–î (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π)
    result = await session.execute(
        text("SELECT id FROM orders ORDER BY id DESC LIMIT 1")
    )
    order = result.first()
    
    if not order:
        raise ValueError("Order not created")
    
    return order.id


async def wait_for_offer(
    session: AsyncSession,
    order_id: int,
    master_id: int,
    timeout: int = 30,
) -> bool:
    """
    –û–∂–∏–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
    
    Args:
        session: –ë–î —Å–µ—Å—Å–∏—è
        order_id: ID –∑–∞–∫–∞–∑–∞
        master_id: ID –º–∞—Å—Ç–µ—Ä–∞
        timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        True –µ—Å–ª–∏ –æ—Ñ—Ñ–µ—Ä –ø–æ—è–≤–∏–ª—Å—è, False –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç
    """
    for _ in range(timeout):
        result = await session.execute(
            text("""
                SELECT id FROM offers 
                WHERE order_id = :order_id 
                AND master_id = :master_id
                LIMIT 1
            """),
            {"order_id": order_id, "master_id": master_id}
        )
        offer = result.first()
        
        if offer:
            return True
        
        await asyncio.sleep(1)
    
    return False


async def get_order_status(
    session: AsyncSession,
    order_id: int,
) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    
    Args:
        session: –ë–î —Å–µ—Å—Å–∏—è
        order_id: ID –∑–∞–∫–∞–∑–∞
    
    Returns:
        –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (NEW, IN_QUEUE, ASSIGNED, STARTED, etc.)
    """
    result = await session.execute(
        text("SELECT status FROM orders WHERE id = :id"),
        {"id": order_id}
    )
    row = result.first()
    
    if not row:
        raise ValueError(f"Order {order_id} not found")
    
    return row.status


async def cancel_order(
    client: BotTestClient,
    order_id: int,
    reason: str = "–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–∞–∑–∞–ª—Å—è",
) -> None:
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
    
    Args:
        client: Telethon –∫–ª–∏–µ–Ω—Ç
        order_id: ID –∑–∞–∫–∞–∑–∞
        reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã
    """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤
    await client.click_button("üìã –û—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤", ADMIN_BOT_USERNAME)
    await asyncio.sleep(1)
    
    # TODO: –ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ ID
    
    # –ù–∞–∂–∏–º–∞–µ–º "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
    await client.click_button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", ADMIN_BOT_USERNAME)
    await asyncio.sleep(0.5)
    
    # –í–≤–æ–¥–∏–º –ø—Ä–∏—á–∏–Ω—É
    await client.send_command(ADMIN_BOT_USERNAME, reason)
    await asyncio.sleep(1)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    await client.click_button("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", ADMIN_BOT_USERNAME)
    await asyncio.sleep(1)
