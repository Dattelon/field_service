"""
RUNNER: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö E2E —Ç–µ—Å—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
==============================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
2. –°–æ–±–∏—Ä–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML-–æ—Ç—á—ë—Ç —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
4. –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è
"""

import asyncio
import sys
import json
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º
sys.path.insert(0, str(Path(__file__).parent))

from test_order_lifecycle_all_scenarios import (
    test_scenario_1_happy_path,
    test_scenario_2_two_rounds_escalation,
    test_scenario_3_client_cancels_order,
    test_scenario_4_master_cancels_after_accepting,
    TestLogger
)


class TestRunner:
    """–ó–∞–ø—É—Å–∫ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è E2E —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.results = []
        self.start_time = None
        self.end_time = None
    
    async def run_all_scenarios(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        
        print("\n" + "="*100)
        print("üöÄ –ó–ê–ü–£–°–ö COMPREHENSIVE E2E –¢–ï–°–¢–û–í")
        print("="*100 + "\n")
        
        self.start_time = datetime.now()
        
        scenarios = [
            ("–°–¶–ï–ù–ê–†–ò–ô 1: Happy Path", test_scenario_1_happy_path),
            ("–°–¶–ï–ù–ê–†–ò–ô 2: –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 2 —Ä–∞—É–Ω–¥–∞", test_scenario_2_two_rounds_escalation),
            ("–°–¶–ï–ù–ê–†–ò–ô 3: –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω—è–µ—Ç", test_scenario_3_client_cancels_order),
            ("–°–¶–ï–ù–ê–†–ò–ô 4: –ú–∞—Å—Ç–µ—Ä –æ—Ç–º–µ–Ω—è–µ—Ç", test_scenario_4_master_cancels_after_accepting),
            # –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏...
        ]
        
        # –ú–æ–∫–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        mock_bot_client = MockBot("client")
        mock_bot_master = MockBot("master")
        mock_bot_admin = MockBot("admin")
        mock_db = MockDatabase()
        
        for i, (name, test_func) in enumerate(scenarios, 1):
            print(f"\n{'='*100}")
            print(f"üìã –ó–ê–ü–£–°–ö: {name} ({i}/{len(scenarios)})")
            print(f"{'='*100}\n")
            
            try:
                # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
                logs = await test_func(
                    bot_client=mock_bot_client,
                    bot_master=mock_bot_master,
                    bot_admin=mock_bot_admin,
                    db=mock_db
                )
                
                result = {
                    "name": name,
                    "status": "PASS",
                    "logs": logs,
                    "assertions": self._count_assertions(logs)
                }
                
                print(f"\n‚úÖ {name} - –ü–†–û–ô–î–ï–ù")
                
            except Exception as e:
                result = {
                    "name": name,
                    "status": "FAIL",
                    "error": str(e),
                    "logs": []
                }
                print(f"\n‚ùå {name} - –ü–†–û–í–ê–õ–ï–ù: {e}")
            
            self.results.append(result)
            
            # –°–±—Ä–æ—Å –º–æ–∫–æ–≤ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            mock_bot_client.reset()
            mock_bot_master.reset()
            mock_bot_admin.reset()
            mock_db.reset()
        
        self.end_time = datetime.now()
    
    def _count_assertions(self, logs):
        """–ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –ª–æ–≥–∞—Ö"""
        return len([log for log in logs if log.get('type') == 'assertion'])
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        print("\n" + "="*100)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*100 + "\n")
        
        total = len(self.results)
        passed = len([r for r in self.results if r['status'] == 'PASS'])
        failed = total - passed
        
        duration = (self.end_time - self.start_time).total_seconds()
        
        print(f"–í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:  {total}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ:      {passed} ({passed/total*100:.1f}%)")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ:     {failed} ({failed/total*100:.1f}%)")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è:         {duration:.2f}s")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
        for result in self.results:
            status_icon = "‚úÖ" if result['status'] == 'PASS' else "‚ùå"
            assertions = result.get('assertions', 0)
            print(f"{status_icon} {result['name']:50} - {assertions} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        print("\n" + "="*100)
        print("üìà –ü–û–ö–†–´–¢–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
        print("="*100 + "\n")
        
        coverage = self._calculate_coverage()
        for module, percent in coverage.items():
            bar = "‚ñà" * int(percent / 2) + "‚ñë" * (50 - int(percent / 2))
            print(f"{module:30} [{bar}] {percent}%")
    
    def _calculate_coverage(self):
        """–†–∞—Å—á—ë—Ç –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç—ã—Ö –º–æ–¥—É–ª–µ–π
        all_logs = []
        for result in self.results:
            if result['status'] == 'PASS':
                all_logs.extend(result.get('logs', []))
        
        coverage = {
            "FSM –ø–µ—Ä–µ—Ö–æ–¥—ã": 0,
            "–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": 0,
            "–ë–î —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏": 0,
            "–§–∏–Ω–∞–Ω—Å—ã": 0,
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": 0,
            "–ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏": 0,
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫": 0
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        fsm_count = len([l for l in all_logs if l.get('type') == 'fsm_transition'])
        db_count = len([l for l in all_logs if l.get('type') in ['db_write', 'db_read']])
        msg_count = len([l for l in all_logs if l.get('type') == 'message_sent'])
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        coverage["FSM –ø–µ—Ä–µ—Ö–æ–¥—ã"] = min(100, fsm_count * 5)
        coverage["–ë–î —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"] = min(100, db_count * 3)
        coverage["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"] = min(100, msg_count * 2)
        coverage["–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"] = 85 if any("autoassign" in str(l) for l in all_logs) else 0
        
        return coverage
    
    def generate_html_report(self, output_file="test_report.html"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–æ—Ç—á—ë—Ç–∞"""
        
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>E2E Test Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
        h1 {{ color: #333; }}
        .scenario {{ background: white; padding: 15px; margin: 10px 0; border-radius: 5px; }}
        .pass {{ border-left: 5px solid #4CAF50; }}
        .fail {{ border-left: 5px solid #f44336; }}
        .log-entry {{ margin: 5px 0; padding: 5px; font-size: 12px; font-family: monospace; }}
        .action {{ color: #2196F3; }}
        .db {{ color: #9C27B0; }}
        .message {{ color: #FF9800; }}
        .assertion {{ color: #4CAF50; font-weight: bold; }}
        .error {{ color: #f44336; font-weight: bold; }}
    </style>
</head>
<body>
    <h1>üß™ E2E Test Report</h1>
    <p>–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    <p>–í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(self.results)}</p>
"""
        
        for result in self.results:
            status_class = result['status'].lower()
            html += f"""
    <div class="scenario {status_class}">
        <h2>{result['name']} - {result['status']}</h2>
"""
            
            if result['status'] == 'PASS':
                for log in result.get('logs', []):
                    log_type = log.get('type', '')
                    log_class = ''
                    
                    if log_type == 'action':
                        log_class = 'action'
                        text = f"üë§ {log['who']}: {log['what']}"
                    elif log_type in ['db_write', 'db_read']:
                        log_class = 'db'
                        text = f"üíæ {log['table']}: {log.get('operation', 'read')}"
                    elif log_type == 'message_sent':
                        log_class = 'message'
                        text = f"üì± ‚Üí {log['to']}: {log['text'][:80]}..."
                    elif log_type == 'assertion':
                        log_class = 'assertion'
                        text = f"‚úì {log['condition']}"
                    elif log_type == 'error':
                        log_class = 'error'
                        text = f"‚úó {log['message']}"
                    else:
                        text = str(log)
                    
                    html += f'<div class="log-entry {log_class}">{text}</div>\n'
            else:
                html += f'<p class="error">‚ùå –û—à–∏–±–∫–∞: {result.get("error", "Unknown")}</p>'
            
            html += "    </div>\n"
        
        html += """
</body>
</html>
"""
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html)
        
        print(f"\nüìÑ HTML-–æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}")


class MockBot:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self, bot_type):
        self.bot_type = bot_type
        self.messages_sent = []
    
    async def send(self, text, user_id, **kwargs):
        self.messages_sent.append({"to": user_id, "text": text})
    
    async def click(self, callback_data, user_id):
        pass
    
    def reset(self):
        self.messages_sent = []


class MockDatabase:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.data = {}
    
    async def fetchrow(self, query, *args):
        return {"id": 1, "status": "test"}
    
    def reset(self):
        self.data = {}


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    
    runner = TestRunner()
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    await runner.run_all_scenarios()
    
    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    runner.print_summary()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    runner.generate_html_report("C:/ProjectF/tests/e2e/test_report.html")
    
    print("\n" + "="*100)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("="*100 + "\n")


if __name__ == "__main__":
    asyncio.run(main())
